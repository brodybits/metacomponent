{"version":3,"sources":["lib/metaTemplate/parseMetaHTML.ts","lib/metaTemplate/parseMetaHTMLAttribute.ts","lib/cssSniff/cssSniff.ts","lib/metaTemplate/parseMetaHTMLIf.ts","lib/metaTemplate/getProps.ts","lib/metaTemplate/metaTemplate.ts","lib/metaTemplate/parseMetaVariable.ts","lib/makeTemplates/Template.ts","lib/makeTemplates/CSS/CSS.ts","lib/makeTemplates/HTML/HTML.ts","lib/makeTemplates/React/React.util.ts","lib/makeTemplates/utils.ts","lib/makeTemplates/React/React.ts","lib/makeTemplates/ReactStyledComponents/ReactStyledComponents.ts","lib/makeTemplates/makeTemplates.ts","lib/log.ts","storage.tsx","App.tsx","lib/index.ts","index.tsx"],"names":["parseHTMLWithoutInsertionMode","domDocument","metaHTMLString","cssString","log","documentString","html","parsingModeTags","replace","match","closingTag","tagName","isClosingTag","response","includes","MT_ALIAS_ATTR","aliasParsingModeElements","wrapBodyHtml","documentElement","innerHTML","doc","Array","from","querySelectorAll","forEach","alias","getAttribute","childNodes","unaliased","createElement","parentNode","insertBefore","childNode","appendChild","getAttributeNames","filter","name","toLowerCase","attr","previousAttributeValue","setAttribute","removeChild","restoreParsingModeElements","childlessElementName","childlessElement","lastChild","nextElementSibling","moveChildlessElements","parseMetaAttributeVariable","dk","optionalRegexp","RegExp","separatorIndex","indexOf","keySegment","substring","isOptional","trim","endsWith","type","id","required","options","length","split","reduce","option","parts","cssSniff","children","matchedCSS","matched","child","nodeType","Node","ELEMENT_NODE","el","sniffRoot","sheets","ownerDocument","styleSheets","Error","sheetsArray","i","sheet","cssRulesArray","cssRules","sheetIsAllowed","cssSniffStyleSheet","_filterCSSRulesByElement","getCSSMatchesByElement","ignoreChildren","rules","rule","selectorText","cssStyleRule","sanitisedSelector","ruleString","whitelisted","blacklisted","whitelistRules","whitelist","ruleMatches","isArray","some","ruleMatch","blacklistRules","blacklist","ruleIsAllowed","selectors","selector","splitted","parens","angulars","soFar","len","char","push","splitSelectors","normalizedSelector","unique","matches","existingCSSSniffStyleRule","cssSniffStyleRule","properties","cssText","lastIndexOf","e","console","error","trimmedSelector","media","cssMediaRule","conditionText","mediaString","whitelistMedia","mediaMatches","mediaMatch","blacklistMedia","mediaIsAllowed","existingMediaRule","childrenRules","Object","keys","before","ownerNode","checkStylesheet","sheetMatch","nodeName","nodeAttrs","attributes","attrs","value","JSON","stringify","whitelistStylesheets","stylesheet","blacklistStylesheets","serializeCSSMatchesAsProperties","values","map","childRule","join","parseMetaHTMLIf","htmlElement","optional","hasAttribute","test","testAsJavaScriptExpression","ids","AST","parseExpression","node","identifierName","findIdentifiers","generate","code","parseError","toString","getProps","nodes","props","walk","attributeName","attributeValuePart","parseMetaTemplateString","body","nodeToMetaNode","TEXT_NODE","textContent","COMMENT_NODE","names","parseMetaVariable","attributeValue","metaHTMLAttributeValueString","remaining","startIndex","endIndex","dkString","metaVariable","parseAttributeValue","cssProperties","element","attributesThatCanBeSet","attribute","metaAttribute","resetElementAttributes","resetMatchedCSS","cssPropertiesStringConstants","cssPropertiesString","resetValue","entries","optionName","optionValue","a","b","diff","bSheetIndex","bSheet","bRuleIndex","bRule","diffStyleSheet","diffRule","aRule","diffChildren","bRuleChildIndex","cssRootDiff","condition","equalsString","getAllMatchingCSSProperties","getAllMatchingCSSRulesRecursively","internalToPublic","walkAttributes","internalAttributes","key","newAttributeValues","x","assertUnreachable","newValue","getAllMatchingCSSRules","css","sheetIndex","ruleIndex","childRuleIndex","serializeCSSMatches","Template","args","dirname","templateId","hasMultipleRootNodes","this","onElement","onText","onComment","onVariable","onIf","onSerialize","CSSTemplate","onCloseElement","variable","onCloseIf","onFinalise","serialize","newCSS","prettier","format","parser","printWidth","plugins","parserPostCSS","HTMLTemplate","attributeValues","optionKeys","firstKey","openingElement","parserHTML","transform","class","for","autocomplete","readonly","autofocus","srcset","crossorigin","spellcheck","tabindex","maxlength","attributeNameTransform","getTypeScriptElementName","capitalize","validJavaScriptIdentifer","ReactTemplate","imports","render","typeScript","constants","fileData","setTypeScript","bind","renderPropType","setImports","renderRenderFunction","propId","prop","propString","propIds","destructure","renderAttribute","reactAttributeName","containsExpression","containsConstant","renderAttributeValue","identifier","optionKey","parserTypeScript","ReactStyledComponentsTemplate","styledConstants","styledName","counter","toUpperCase","pickedProps","renderCSSPropertyProps","styledProps","cssProperty","renderCSSProperty","styledAttributes","cssPropertiesNode","conditional","uniq","val","makeTemplates","metaTemplate","obj","assign","mergeTemplateFiles","makeTemplate","instance","logFactory","haltOnErrors","arg","STORAGE_TYPE","localStorageWrapper","setItem","window","localStorage","sessionStorage","getItem","removeItem","resultIndexString","resultIndex","parseInt","defaultValues","metaHTML","modalStyles","overlay","backgroundColor","zIndex","content","background","inset","pathType","file","Modal","setAppElement","App","useState","setMetaHTML","setCSS","metaTemplates","setMetaTemplates","setResultIndex","isWhatOpen","setIsWhatOpen","debounceTime","useRef","iframeRef","closeWhatModal","useEffect","handler","setTimeout","iframeEl","current","contentWindow","document","startTime","Date","now","result","files","generateTemplates","newDebounceTime","clearTimeout","filePaths","outputValue","outputMode","aceMode","markers","templateIdIndex","outputValueBefore","rowIndex","startCol","startRow","endRow","endCol","className","inFront","isOpen","onRequestClose","style","contentLabel","shouldCloseOnOverlayClick","onClick","stopPropagation","dangerouslySetInnerHTML","__html","whatIsMetaHTML","mode","theme","onChange","width","height","showGutter","showPrintMargin","src","title","ref","role","aria-selected","undefined","aria-controls","fileIndex","readOnly","marked","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.acdb2035.chunk.js","sourcesContent":["import { Log } from \"../log\";\n// Combine metaHTML and CSS in an HTML document string, and restore parsing mode\n// problems.\n//\n// Some tags like <select> and <tbody> etc., invoke HTML5 parsing modes\n// that only allow certain tags within them, or they rearrange the tree\n// based on those tags, so we need to alias them. See\n// https://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#the-insertion-mode\n// So that would mean we couldn't have tags like,\n//\n// <select>\n//   <mt-variable key=\"children\">placeholder</mt-variable>\n// </select>\n//\n// So instead we'll turn that into,\n//\n// <mt-alias-select>\n//   <mt-variable key=\"children\">placeholder</mt-variable>\n// </mt-alias-select>\n//\n// and rename the element after parsing\n\ntype Props = {\n  domDocument: Document;\n  metaHTMLString: string;\n  cssString: string;\n  log: Log;\n};\n\nexport function parseHTMLWithoutInsertionMode({\n  domDocument,\n  metaHTMLString,\n  cssString,\n  log,\n}: Props): void {\n  const documentString = wrapBodyHtml(metaHTMLString, cssString);\n  domDocument.documentElement.innerHTML = documentString;\n\n  restoreParsingModeElements(domDocument, log);\n  moveChildlessElements(domDocument);\n}\n\nfunction wrapBodyHtml(metaHTMLString: string, cssString: string): string {\n  return `<head><style>${cssString}</style></head><body>${aliasParsingModeElements(\n    metaHTMLString\n  )}</body>`;\n}\n\nconst MT_ALIAS_TAG = \"mt-\";\nconst MT_ALIAS_ATTR = \"data-mt-original-element-name\";\n\nfunction aliasParsingModeElements(html: string): string {\n  const parsingModeTags = [\n    \"table\",\n    \"thead\",\n    \"tbody\",\n    \"tfoot\",\n    \"tr\",\n    \"caption\",\n    \"select\",\n    \"option\",\n  ];\n\n  return html.replace(/<([/]?)([^ >]+)/gi, (match, closingTag, tagName) => {\n    const isClosingTag = !!closingTag;\n    let response = `<${isClosingTag ? \"/\" : \"\"}`;\n    if (parsingModeTags.includes(tagName)) {\n      response += MT_ALIAS_TAG;\n      if (!isClosingTag) {\n        response += ` ${MT_ALIAS_ATTR}=\"${tagName}\" `;\n      }\n    } else {\n      response += tagName;\n    }\n    return response;\n  });\n}\n\nfunction restoreParsingModeElements(domDocument: Document, log: Log): void {\n  const doc = domDocument;\n  const aliases = Array.from(doc.querySelectorAll(MT_ALIAS_TAG));\n  aliases.forEach((alias: Element) => {\n    if (!alias) return;\n    const tagName = alias.getAttribute(MT_ALIAS_ATTR);\n    if (!tagName) {\n      log(`MetaTemplate: ${MT_ALIAS_TAG} missing ${MT_ALIAS_ATTR} attribute.`);\n      return;\n    }\n    const childNodes = Array.from(alias.childNodes);\n    const unaliased = doc.createElement(tagName);\n    if (!alias.parentNode) {\n      log(\"MetaTemplate parsing mode element must not be top-level.\");\n      return;\n    }\n    alias.parentNode.insertBefore(unaliased, alias);\n    childNodes.forEach((childNode) => {\n      unaliased.appendChild(childNode);\n    });\n    const attrs = alias.getAttributeNames().filter(\n      (name) => name.toLowerCase() !== MT_ALIAS_ATTR.toLowerCase() // because DOMs can lowercase attributes so we need a case-insensitive string comparison\n    );\n    attrs.forEach((attr) => {\n      const previousAttributeValue = alias.getAttribute(attr);\n      if (!previousAttributeValue) {\n        log(\"MetaTemplate: must have a previous attribute value\");\n        return;\n      }\n      unaliased.setAttribute(attr, previousAttributeValue);\n    });\n    alias.parentNode.removeChild(alias);\n  });\n}\n\nfunction moveChildlessElements(domDocument: Document) {\n  const childlessElementNames = [\"mt-variable\"];\n  childlessElementNames.forEach((childlessElementName: string): void => {\n    Array.from(domDocument.querySelectorAll(childlessElementName)).forEach(\n      (childlessElement: Element) => {\n        while (childlessElement.lastChild) {\n          childlessElement.parentNode?.insertBefore(\n            childlessElement.lastChild,\n            childlessElement.nextElementSibling\n          );\n        }\n      }\n    );\n  });\n}\n","import { Log } from \"../log\";\n\nexport const parseAttributeValue = (\n  metaHTMLAttributeValueString: string,\n  log: Log\n): MetaAttributeValuesInternal => {\n  const response: MetaAttributeValuesInternal = [];\n  let remaining: string = metaHTMLAttributeValueString;\n  const start = \"{{\" as const;\n  const end = \"}}\" as const;\n\n  while (remaining.length) {\n    const startIndex = remaining.indexOf(start);\n\n    if (startIndex === -1) {\n      // no MetaAttributeVariable, just string remainings\n      response.push({\n        type: \"MetaAttributeConstant\",\n        value: remaining,\n      });\n      remaining = \"\";\n    } else if (startIndex === 0) {\n      // a MetaAttributeVariable\n      const endIndex = remaining.indexOf(end, startIndex);\n      if (endIndex === -1) {\n        log(`Attribute with ${start} but no ${end}.`);\n        return response;\n      }\n      const dkString = remaining.substring(start.length, endIndex);\n      const metaVariable = parseMetaAttributeVariable(dkString);\n      response.push(metaVariable);\n      remaining = remaining.substring(endIndex + end.length);\n    } else {\n      // string before another MetaVariable\n      response.push({\n        type: \"MetaAttributeConstant\",\n        value: remaining.substring(0, startIndex),\n      });\n      remaining = remaining.substring(startIndex);\n    }\n  }\n  return response;\n};\n\nexport const parseMetaAttributeVariable = (\n  dk: string\n): MetaAttributeVariableInternal | MetaAttributeVariableOptionsInternal => {\n  const SEPARATOR = \":\";\n  const ENUM_SEPARATOR = \"|\";\n  const OPTIONAL = \"?\";\n\n  const escapeTextForRegex = (text: string) => {\n    return text.replace(/([()[{*+.$^\\\\|?])/g, \"\\\\$1\");\n  };\n\n  const optionalRegexp = new RegExp(`${escapeTextForRegex(OPTIONAL)}$`); // regex anchored to end of string\n\n  const separatorIndex = dk.indexOf(SEPARATOR);\n  let keySegment = separatorIndex === -1 ? dk : dk.substring(0, separatorIndex);\n  keySegment = keySegment.trim();\n  const isOptional = keySegment.endsWith(OPTIONAL);\n  if (isOptional) {\n    keySegment = keySegment.replace(optionalRegexp, \"\");\n  }\n\n  if (separatorIndex === -1) {\n    // chance to exit early\n    return {\n      type: \"MetaAttributeVariable\",\n      id: keySegment,\n      required: !isOptional,\n    };\n  }\n\n  const options: Record<string, string> = dk\n    .substring(separatorIndex + SEPARATOR.length)\n    .split(ENUM_SEPARATOR)\n    .reduce((options: Record<string, string>, option: string): Record<\n      string,\n      string\n    > => {\n      // An option is a string that looks like either,\n      //    \" valueThatIsAlsoName \"\n      //    \" value as friendlyName \"\n      // so when split by \" as \" it will have either\n      // 1 or 2 array items.\n      const parts: string[] = option.split(\" as \");\n      const name = parts.length === 2 ? parts[1].trim() : parts[0].trim();\n      if (name.length > 0) {\n        options[name] = parts[0].trim();\n      }\n      return options;\n    }, {});\n\n  return {\n    type: \"MetaAttributeVariableOptions\",\n    id: keySegment,\n    required: !isOptional,\n    options,\n  };\n};\n\nexport type MetaAttributeVariable = {\n  type: \"MetaAttributeVariable\";\n  id: string;\n};\n\nexport type MetaAttributeVariableOptions = {\n  type: \"MetaAttributeVariableOptions\";\n  id: string;\n  options: Record<string, string>;\n};\n\nexport type MetaAttributeConstant = {\n  type: \"MetaAttributeConstant\";\n  value: string;\n};\n\ntype MetaAttributeVariableInternal = MetaAttributeVariable & {\n  required: boolean;\n};\ntype MetaAttributeVariableOptionsInternal = MetaAttributeVariableOptions & {\n  required: boolean;\n};\n\nexport type MetaAttributeValueInternal =\n  | MetaAttributeConstant\n  | MetaAttributeVariableInternal\n  | MetaAttributeVariableOptionsInternal;\n\nexport type MetaAttributeValuesInternal = MetaAttributeValueInternal[];\n\nexport type MetaAttributeValue =\n  | MetaAttributeConstant\n  | MetaAttributeVariable\n  | MetaAttributeVariableOptions;\n\nexport type MetaAttributeValues = MetaAttributeValue[];\n","type Options = {\n  ignoreChildren?: boolean;\n  whitelist?: { stylesheet?: string; media?: string; rule?: string };\n  blacklist?: { stylesheet?: string; media?: string; rule?: string };\n};\n\nexport type CSSSniffRoot = {\n  [sheetIndex: string]: CSSSniffStyleSheet;\n};\n\nexport type CSSSniffStyleSheet = {\n  [ruleIndex: string]: CSSSniffStyleRule | CSSSniffMediaRule;\n};\n\nexport type CSSSniffStyleRule = {\n  type: \"CSSSniffStyleRule\";\n  selectors: string[];\n  properties: string;\n};\n\nexport type CSSSniffMediaRule = {\n  type: \"CSSSniffMediaRule\";\n  before: string;\n  children: CSSSniffStyleSheet;\n};\n\nexport function cssSniff(\n  children: ChildNode[],\n  options: Options,\n  matchedCSS?: CSSSniffRoot\n): CSSSniffRoot {\n  const matched: CSSSniffRoot = matchedCSS || {};\n\n  children.forEach((child) => {\n    if (child.nodeType !== Node.ELEMENT_NODE) {\n      // only Elements can have CSS (ie, text nodes can't have CSS)\n      return;\n    }\n    // @ts-ignore\n    const el: HTMLElement = child;\n    getCSSMatchesByElement(el, options, matched);\n    if (!options.ignoreChildren && el.childNodes) {\n      cssSniff(Array.from(el.childNodes), options, matched);\n    }\n  });\n\n  return matched;\n}\n\nfunction getCSSMatchesByElement(\n  el: HTMLElement,\n  options: Options,\n  sniffRoot: CSSSniffRoot\n): void {\n  if (el.nodeType !== Node.ELEMENT_NODE) {\n    return;\n  }\n\n  const sheets = el.ownerDocument?.styleSheets;\n  if (!sheets) {\n    throw Error(`Expected to find stylesheets of Node.`);\n  }\n  // @ts-ignore\n  const sheetsArray: CSSStyleSheet[] = Array.from(sheets);\n\n  for (let i in sheetsArray) {\n    const sheet = sheetsArray[i];\n\n    const cssRulesArray = Array.from(sheet.cssRules);\n\n    if (sheetIsAllowed(sheet, options)) {\n      const cssSniffStyleSheet: CSSSniffStyleSheet = sniffRoot[i] || {};\n      sniffRoot[i] = cssSniffStyleSheet;\n      _filterCSSRulesByElement(el, cssRulesArray, options, cssSniffStyleSheet);\n    }\n  }\n}\n\nfunction _filterCSSRulesByElement(\n  el: HTMLElement,\n  rules: CSSRule[],\n  options: Options,\n  cssSniffStyleSheet: CSSSniffStyleSheet // is mutated\n): void {\n  for (let i in rules) {\n    const rule = rules[i];\n\n    // @ts-ignore\n    if (rule.selectorText) {\n      // @ts-ignore\n      const cssStyleRule: CSSStyleRule = rule;\n      const sanitisedSelector = cssStyleRule.selectorText.replace(\n        /@charset.*?;/g,\n        \"\"\n      );\n\n      if (ruleIsAllowed(sanitisedSelector, options)) {\n        const selectors = splitSelectors(sanitisedSelector);\n\n        selectors.forEach((selector) => {\n          let trimmedSelector;\n          let normalizedSelector;\n\n          try {\n            // Exceptions may be thrown about browser-specific\n            // selectors such as\n            //\n            //   input::-moz-something\n            //   input::-webkit-something\n            //   input::-ms-something\n            //   input:-moz-something\n            //   input:-webkit-something\n            //   input:-ms-something\n            //\n            // or potentially selectors without anything before\n            // the \":\",\n            //\n            //   ::-moz-something\n            //   :not(input)\n            //\n            // and there are also escaped selectors like,\n            //\n            //   .link.\\:link\n            //\n            //  (used like <input class=\"link :link\">)\n            //\n            // and pseudo-elements like,\n            //\n            //   span::before\n            //\n            // where the \"::before\" is irrelevant to whether the\n            // selector matches the element so we should remove it.\n            //\n            // and\n            //\n            //   input:first-child\n            //   p > :first-child\n            //\n            // where we should change to\n            //   input\n            //   p > *\n            // respectively because we can't know HTML structure.\n            //\n            // So given all those scenarios we have the following logic,\n            //\n            // 1) If it starts with \":\" without anything preceding we'll\n            //    consider it a match because it could be.\n            //    (maybe this should be configurable?)\n            //\n            // 2) If it has a \":\" in it that's not preceded by \"\\\" then\n            //    we remove to the end of the selector. ie,\n            //    input:-moz-something -> input\n            //    input\\:-moz-something -> input\\:-moz-something\n            //    input::before -> input::before\n            //    input\\:\\:moz-something -> input\\:\\:moz-something\n\n            // PRE-NORMALISATON\n            // Temporarily replace \"\\:\" (escaped colon) to simplify\n            // removing \":something\" (real colon) which we restore later.\n            normalizedSelector = selector.replace(/\\\\:/g, unique).trim();\n\n            // START OF NORMALIZATION\n            // The goal here is to anticipate any possible node states that\n            // might match this node (ie, \"\":checked\" or adjacent sibling/hierarchical\n            // selectors)\n\n            normalizedSelector = normalizedSelector\n              .replace(/^.*[\\s]/, \"\") // regex 'greedy' selector anchored to string start, searching for whitespace to convert (eg) \".a + .b + .c\" to \".c\". Delete any conditions on hierarchical (adjacent sibling / descendent etc.) selectors because they could match and that's close enough to warrant including it.\n              .replace(/:+.*$/gi, \"\") // regex 'greedy' selector anchored to string end, searching for \":\" and deleting everything after\n              .trim();\n\n            // END OF NORMALISATION\n\n            // Restore escaped colons back to \"\\:\".\n            // See above comment about escaped colons.\n            normalizedSelector = normalizedSelector.replace(\n              new RegExp(unique, \"g\"),\n              \"\\\\:\"\n            );\n\n            const isMatch = el.matches(normalizedSelector);\n\n            if (isMatch) {\n              const existingCSSSniffStyleRule = cssSniffStyleSheet[i];\n              if (\n                existingCSSSniffStyleRule &&\n                existingCSSSniffStyleRule.type !== \"CSSSniffStyleRule\"\n              ) {\n                throw Error(\"Rule can't change type\");\n              }\n              const cssSniffStyleRule: CSSSniffStyleRule = {\n                type: \"CSSSniffStyleRule\",\n                selectors: existingCSSSniffStyleRule\n                  ? existingCSSSniffStyleRule.selectors\n                  : [],\n                properties: cssStyleRule.cssText.substring(\n                  cssStyleRule.cssText.indexOf(\"{\") + 1,\n                  cssStyleRule.cssText.lastIndexOf(\"}\")\n                ),\n              };\n              if (!cssSniffStyleRule.selectors.includes(selector)) {\n                cssSniffStyleRule.selectors.push(selector);\n              }\n              cssSniffStyleSheet[i] = cssSniffStyleRule;\n            }\n          } catch (e) {\n            const isCharsetError =\n              \"@charset\".indexOf(cssStyleRule.selectorText) !== -1;\n            if (!isCharsetError) {\n              console.error(\n                \"ERROR\",\n                cssStyleRule.type,\n                `[${trimmedSelector}]`,\n                `[[${normalizedSelector}]]`,\n                `(((${cssStyleRule.selectorText})))`,\n                e\n              );\n            }\n          }\n        });\n      }\n    } else if (\n      // @ts-ignore\n      rule.media\n    ) {\n      // @ts-ignore\n      const cssMediaRule: CSSMediaRule = rule;\n      const conditionText = cssMediaRule.conditionText || cssMediaRule.media[0];\n      if (mediaIsAllowed(conditionText, options)) {\n        // a nested rule like @media { rule { ... } }\n        // so we filter the rules inside individually\n        const cssRulesArray = Array.from(cssMediaRule.cssRules);\n\n        const existingMediaRule = cssSniffStyleSheet[i];\n        if (\n          existingMediaRule &&\n          existingMediaRule.type !== \"CSSSniffMediaRule\"\n        ) {\n          throw Error(`Can't change type`);\n        }\n\n        const childrenRules: CSSSniffStyleSheet = existingMediaRule\n          ? existingMediaRule.children\n          : {};\n\n        _filterCSSRulesByElement(el, cssRulesArray, options, childrenRules);\n\n        if (Object.keys(childrenRules).length > 0) {\n          cssSniffStyleSheet[i] = {\n            type: \"CSSSniffMediaRule\",\n            before: \"@media \" + conditionText,\n            children: childrenRules,\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction sheetIsAllowed(sheet: StyleSheet, options: Options) {\n  // Returns boolean of whether the sheet is allowed\n  // due to whitelist/blacklist\n  if (!sheet) return false;\n  if (!sheet.ownerNode) return true;\n\n  const checkStylesheet = (sheet: StyleSheet, sheetMatch: string) => {\n    switch (sheet.ownerNode.nodeName.toLowerCase()) {\n      case \"style\":\n      case \"link\":\n        // @ts-ignore\n        const el: HTMLElement = sheet.ownerNode;\n        // matching on JSON.stringify(node.attrs)\n        const nodeAttrs = el.attributes;\n        const attrs: Record<string, string> = {};\n        for (let i = 0; i < nodeAttrs.length; i++) {\n          const name = nodeAttrs[i].name;\n          attrs[name] = nodeAttrs[i].value;\n        }\n        const attributesJSON = JSON.stringify(attrs);\n        return attributesJSON.indexOf(sheetMatch) !== -1;\n    }\n    throw new Error(\n      `CSS Sniff: Unknown sheet nodeName of ${\n        sheet.ownerNode && sheet.ownerNode.nodeName\n      } `\n    );\n  };\n\n  let whitelisted = true;\n  let blacklisted = false;\n\n  const whitelistStylesheets =\n    options.whitelist && options.whitelist.stylesheet;\n  if (whitelistStylesheets) {\n    const sheetMatches = Array.isArray(whitelistStylesheets)\n      ? Array.from(whitelistStylesheets)\n      : [whitelistStylesheets];\n    whitelisted = sheetMatches.some((sheetMatch) =>\n      checkStylesheet(sheet, sheetMatch)\n    );\n  }\n\n  const blacklistStylesheets =\n    options.blacklist && options.blacklist.stylesheet;\n  if (blacklistStylesheets) {\n    const sheetMatches = Array.isArray(blacklistStylesheets)\n      ? blacklistStylesheets\n      : [blacklistStylesheets];\n    blacklisted = sheetMatches.some((sheetMatch) =>\n      checkStylesheet(sheet, sheetMatch)\n    );\n  }\n\n  return whitelisted !== false && blacklisted !== true;\n}\n\nfunction mediaIsAllowed(mediaString: string, options: Options) {\n  if (!options || !mediaString) return false;\n\n  let whitelisted = true;\n  let blacklisted = false;\n\n  const whitelistMedia = options.whitelist && options.whitelist.media;\n  if (whitelistMedia) {\n    const mediaMatches = Array.isArray(whitelistMedia)\n      ? whitelistMedia\n      : [whitelistMedia];\n    whitelisted = mediaMatches.some(\n      (mediaMatch) => mediaString.indexOf(mediaMatch) !== -1\n    );\n  }\n\n  const blacklistMedia = options.blacklist && options.blacklist.media;\n  if (blacklistMedia) {\n    const mediaMatches = Array.isArray(blacklistMedia)\n      ? blacklistMedia\n      : [blacklistMedia];\n    blacklisted = mediaMatches.some(\n      (mediaMatch) => mediaString.indexOf(mediaMatch) !== -1\n    );\n  }\n\n  return whitelisted !== false && blacklisted !== true;\n}\n\nfunction ruleIsAllowed(ruleString: string, options: Options) {\n  if (!options || !ruleString) return false;\n\n  let whitelisted = true;\n  let blacklisted = false;\n\n  const whitelistRules = options.whitelist && options.whitelist?.rule;\n  if (whitelistRules) {\n    const ruleMatches = Array.isArray(whitelistRules)\n      ? whitelistRules\n      : [whitelistRules];\n    whitelisted = ruleMatches.some(\n      (ruleMatch) => ruleString.indexOf(ruleMatch) !== -1\n    );\n  }\n\n  const blacklistRules = options.blacklist && options.blacklist.rule;\n  if (blacklistRules) {\n    const ruleMatches = Array.isArray(blacklistRules)\n      ? blacklistRules\n      : [blacklistRules];\n    blacklisted = ruleMatches.some(\n      (ruleMatch) => ruleString.indexOf(ruleMatch) !== -1\n    );\n  }\n\n  return whitelisted !== false && blacklisted !== true;\n}\n\nexport function mergeMatches(matchedCSSArray: CSSSniffRoot[]): CSSSniffRoot {\n  // Via https://stackoverflow.com/a/34749873\n  const isObject = (item: any): boolean => {\n    return item && typeof item === \"object\" && !Array.isArray(item);\n  };\n\n  // @ts-ignore\n  type NestedObject = Record<string, NestedObject>;\n\n  const mergeDeep = (\n    target: NestedObject,\n    ...sources: NestedObject[]\n  ): NestedObject => {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n      for (const key in source) {\n        if (isObject(source[key])) {\n          if (!target[key]) {\n            target[key] = {};\n          }\n          const matchedCSS = target[key];\n          if (!matchedCSS) {\n            throw Error(\"Expected to be able to create key\");\n          }\n          mergeDeep(matchedCSS, source[key]);\n        } else {\n          Object.assign(target, { [key]: source[key] });\n        }\n      }\n    }\n    return mergeDeep(target, ...sources);\n  };\n  return mergeDeep({}, ...matchedCSSArray);\n}\n\nexport function serializeCSSMatches(matchedCSS: CSSSniffRoot): string {\n  let css = \"\";\n\n  Object.keys(matchedCSS).forEach((sheetIndex: string) => {\n    const sheet = matchedCSS[sheetIndex];\n\n    Object.keys(sheet).forEach((ruleIndex: string) => {\n      const rule = sheet[ruleIndex];\n      if (rule.type === \"CSSSniffStyleRule\") {\n        css += rule.selectors.join(\",\");\n        css += \"{\";\n        css += rule.properties;\n        css += \"}\";\n      } else if (rule.type === \"CSSSniffMediaRule\") {\n        css += rule.before;\n        css += \"{\";\n        Object.keys(rule.children).forEach((childRuleIndex: string) => {\n          const childRule = rule.children[childRuleIndex];\n          if (childRule.type === \"CSSSniffStyleRule\") {\n            css += childRule.selectors.join(\",\");\n            css += \"{\";\n            css += childRule.properties;\n            css += \"}\";\n          } else {\n            throw Error(\"Can't serialize invalid CSS structure\");\n          }\n        });\n        css += \"}\";\n      }\n    });\n  });\n\n  return css;\n}\n\nexport function serializeCSSMatchesAsProperties(\n  matchedCSS: CSSSniffRoot\n): string {\n  return Object.values(matchedCSS)\n    .map((sheet): string => {\n      return Object.values(sheet)\n        .map((rule): string => {\n          if (rule.type === \"CSSSniffStyleRule\") {\n            return rule.properties;\n          } else if (rule.type === \"CSSSniffMediaRule\") {\n            return `${rule.before}{${Object.values(rule.children)\n              .map((childRule): string => {\n                if (childRule.type === \"CSSSniffStyleRule\") {\n                  return childRule.properties;\n                }\n                throw Error(\"Invalid structure\");\n              })\n              .join(\"\")}}`;\n          }\n          throw Error(`Unknown type.`);\n        })\n        .join(\"\");\n    })\n    .join(\";\")\n    .trim();\n}\n\nexport function cssRootDiff(a: CSSSniffRoot, b: CSSSniffRoot): CSSSniffRoot {\n  const diff: CSSSniffRoot = {};\n\n  Object.keys(b).forEach((bSheetIndex) => {\n    const bSheet = b[bSheetIndex];\n    Object.keys(bSheet).forEach((bRuleIndex) => {\n      const bRule = bSheet[bRuleIndex];\n      let diffStyleSheet: CSSSniffStyleSheet = diff[bSheetIndex] || {};\n      if (bRule.type === \"CSSSniffStyleRule\") {\n        if (!a[bSheetIndex] || !a[bSheetIndex][bRuleIndex]) {\n          diffStyleSheet[bRuleIndex] = bRule;\n          diff[bSheetIndex] = diffStyleSheet;\n        }\n      } else if (bRule.type === \"CSSSniffMediaRule\") {\n        const diffRule = diff[bSheetIndex] && diff[bSheetIndex][bRuleIndex];\n        if (diffRule && diffRule.type !== \"CSSSniffMediaRule\") {\n          throw Error(`Cannot change type of diff`);\n        }\n        const aRule = a[bSheetIndex] && a[bSheetIndex][bRuleIndex];\n        if (aRule && aRule.type !== \"CSSSniffMediaRule\") {\n          throw Error(`Cannot change type of (a)`);\n        }\n        const diffChildren = diffRule.children || {};\n        Object.keys(bRule.children).forEach((bRuleChildIndex) => {\n          if (!aRule || !aRule.children[bRuleChildIndex]) {\n            diffChildren[bRuleChildIndex] = bRule.children[bRuleChildIndex];\n          }\n        });\n        if (Object.keys(diffChildren).length > 0) {\n          diffStyleSheet[bRuleIndex] = {\n            ...bRule,\n            children: diffChildren,\n          };\n          diff[bSheetIndex] = diffStyleSheet;\n        }\n      }\n    });\n  });\n\n  return diff;\n}\n\nexport function splitSelectors(selectors: string): string[] {\n  /*\n    split-css-selector by Joakim Carlstein (C) 2015 for\n    function 'splitSelectors'. Licenced under MIT\n  */\n  function isAtRule(selector: string): boolean {\n    return selector.indexOf(\"@\") === 0;\n  }\n\n  if (isAtRule(selectors)) {\n    return [selectors];\n  }\n\n  var splitted = [];\n  var parens = 0;\n  var angulars = 0;\n  var soFar = \"\";\n  for (var i = 0, len = selectors.length; i < len; i++) {\n    var char = selectors[i];\n    if (char === \"(\") {\n      parens += 1;\n    } else if (char === \")\") {\n      parens -= 1;\n    } else if (char === \"[\") {\n      angulars += 1;\n    } else if (char === \"]\") {\n      angulars -= 1;\n    } else if (char === \",\") {\n      if (!parens && !angulars) {\n        splitted.push(soFar.trim());\n        soFar = \"\";\n        continue;\n      }\n    }\n    soFar += char;\n  }\n  splitted.push(soFar.trim());\n  return splitted;\n}\n\nconst unique = `css-sniff-placeholder`;\n","import { Log } from \"../log\";\nimport {\n  MetaHTMLIfSuccessInternal,\n  MetaHTMLIfFailureInternal,\n} from \"./metaTemplate\";\nimport { parseExpression } from \"@babel/parser\";\nimport generate from \"@babel/generator\";\n\ntype Props = {\n  htmlElement: HTMLElement;\n  log: Log;\n};\n\nexport const parseMetaHTMLIf = ({\n  htmlElement,\n  log,\n}: Props):\n  | Omit<MetaHTMLIfSuccessInternal, \"children\">\n  | Omit<MetaHTMLIfFailureInternal, \"children\"> => {\n  const optional = !!htmlElement.hasAttribute(\"optional\");\n  const test =\n    htmlElement.getAttribute(\"test\") || htmlElement.getAttribute(\"key\"); // 'key' is legacy from MetaTemplate v1\n  if (!test) {\n    log(\n      `Expected to find 'test' (or 'key' for legacy support) attribute on mt-if`\n    );\n  }\n\n  try {\n    let testAsJavaScriptExpression = \"\";\n    let ids: string[] = [];\n    if (test) {\n      const AST = parseExpression(test);\n      ids = findIdentifiers(AST);\n      testAsJavaScriptExpression = generate(AST).code;\n    }\n    return {\n      type: \"If\",\n      ids,\n      testAsJavaScriptExpression,\n      optional,\n      parseError: false,\n    };\n  } catch (e) {\n    log(`JS Expression:\\n\\t${test}\\n`, e);\n    return { type: \"If\", optional, parseError: true, error: e.toString() };\n  }\n};\n\nfunction findIdentifiers(AST: ReturnType<typeof parseExpression>): string[] {\n  const ids: string[] = [];\n\n  const walk = (node: any) => {\n    if (node.type === \"Identifier\" && node.name) {\n      ids.push(node.name);\n    } else if (node.identifierName) {\n      ids.push(node.identifierName);\n    }\n    // Object.keys(node).forEach((name) => walk(node[name]));\n  };\n  // @ts-ignore\n  Object.keys(AST).forEach((name) => walk(AST[name]));\n\n  return ids;\n}\n","import { MetaNodeInternal } from \"./metaTemplate\";\nimport { Log } from \"../log\";\nimport { MetaAttributeVariableOptions } from \"./parseMetaHTMLAttribute\";\n\ntype PropTypeAttributeValue = {\n  type: \"PropTypeAttributeValue\";\n  required: boolean;\n  nodeName: string;\n  attributeName: string;\n};\n\ntype PropTypeAttributeValueOptions = {\n  type: \"PropTypeAttributeValueOptions\";\n  required: boolean;\n  nodeName: string;\n  attributeName: string;\n  options: MetaAttributeVariableOptions[\"options\"];\n};\n\ntype PropTypeVariable = {\n  type: \"PropTypeVariable\";\n  required: boolean;\n};\n\n// These are return props not the props given to this function\nexport type Props = Record<\n  string,\n  PropTypeAttributeValue | PropTypeAttributeValueOptions | PropTypeVariable\n>;\n\nexport function getProps(nodes: MetaNodeInternal[], log: Log): Props {\n  const props: Props = {};\n\n  const walk = (node: MetaNodeInternal) => {\n    switch (node.type) {\n      case \"Element\":\n        {\n          const attributeNames = Object.keys(node.attributes);\n          attributeNames.forEach((attributeName) => {\n            const attributeValueParts = node.attributes[attributeName];\n            attributeValueParts.forEach((attributeValuePart) => {\n              if (attributeValuePart.type === \"MetaAttributeVariable\") {\n                if (!attributeValuePart.id) {\n                  log(\n                    `Ignoring empty prop id. ${JSON.stringify(\n                      attributeValuePart\n                    )} from ${JSON.stringify(node)}`\n                  );\n                  return;\n                }\n                if (\n                  props[attributeValuePart.id] &&\n                  props[attributeValuePart.id].type ===\n                    \"PropTypeAttributeValueOptions\"\n                ) {\n                  return; // don't clobber with a less-specific typing than options\n                }\n                props[attributeValuePart.id] = {\n                  type: \"PropTypeAttributeValue\",\n                  required: attributeValuePart.required,\n                  nodeName: node.nodeName,\n                  attributeName,\n                };\n              } else if (\n                attributeValuePart.type === \"MetaAttributeVariableOptions\"\n              ) {\n                if (!attributeValuePart.id) {\n                  log(\n                    `Ignoring empty prop id. ${JSON.stringify(\n                      attributeValuePart\n                    )} from ${JSON.stringify(node)}`\n                  );\n                  return;\n                }\n                props[attributeValuePart.id] = {\n                  type: \"PropTypeAttributeValueOptions\",\n                  required: attributeValuePart.required,\n                  nodeName: node.nodeName,\n                  attributeName,\n                  options: attributeValuePart.options,\n                };\n              }\n            });\n          });\n          node.children.forEach(walk);\n        }\n        break;\n      case \"If\":\n        if (node.parseError === false) {\n          node.ids.forEach((id) => {\n            if (!id) {\n              log(`Ignoring empty prop id from ${JSON.stringify(node)}`);\n              return;\n            }\n            if (props[id]) return; // don't clobber a more specific typing\n\n            props[id] = {\n              type: \"PropTypeVariable\",\n              required: !node.optional,\n            };\n          });\n        }\n        break;\n      case \"Variable\": {\n        if (!node.id) {\n          log(`Ignoring empty prop id from ${JSON.stringify(node)}`);\n          break;\n        }\n        if (props[node.id]) return; // don't clobber a more specific typing\n        props[node.id] = {\n          type: \"PropTypeVariable\",\n          required: !node.optional,\n        };\n        break;\n      }\n    }\n  };\n\n  nodes.forEach(walk);\n\n  return props;\n}\n","import { parseHTMLWithoutInsertionMode } from \"./parseMetaHTML\";\nimport {\n  parseAttributeValue,\n  MetaAttributeValue,\n  MetaAttributeValues,\n  MetaAttributeValuesInternal,\n} from \"./parseMetaHTMLAttribute\";\nimport { parseMetaVariable } from \"./parseMetaVariable\";\nimport {\n  cssSniff,\n  serializeCSSMatches,\n  serializeCSSMatchesAsProperties,\n  cssRootDiff,\n  CSSSniffRoot,\n} from \"../cssSniff/cssSniff\";\nimport { parseMetaHTMLIf } from \"./parseMetaHTMLIf\";\nimport { getProps, Props } from \"./getProps\";\nimport { Log } from \"../log\";\n\ntype ParseMetaTemplateStringProps = {\n  domDocument: Document;\n  metaHTMLString: string;\n  cssString: string;\n  log: Log;\n};\n\nexport function parseMetaTemplateString({\n  domDocument,\n  metaHTMLString,\n  cssString,\n  log,\n}: ParseMetaTemplateStringProps): MetaTemplate {\n  parseHTMLWithoutInsertionMode({\n    domDocument,\n    metaHTMLString,\n    cssString,\n    log,\n  });\n  // now we have a DOM representing the original MetaHTMLString, so we need to build a MetaHTML\n  const bodyNodes = Array.from(domDocument.body.childNodes);\n  const nodes = bodyNodes.map((node) => nodeToMetaNode({ node, log }));\n  const metaTemplate = {\n    cssString: getAllMatchingCSSRulesRecursively(nodes),\n    props: getProps(nodes, log),\n    nodes: internalToPublic(nodes),\n  };\n  return metaTemplate;\n}\n\nexport type MetaTemplate = {\n  cssString: string;\n  nodes: MetaNode[];\n  props: Props;\n};\n\nexport type MetaNode =\n  | MetaHTMLElement\n  | MetaHTMLText\n  | MetaHTMLComment\n  | MetaHTMLVariable\n  | MetaHTMLIf;\n\nexport type MetaNodeInternal =\n  | MetaHTMLElementInternal\n  | MetaHTMLText\n  | MetaHTMLComment\n  | MetaHTMLVariableInternal\n  | MetaHTMLIfInternal;\n\nexport type MetaHTMLElement = {\n  type: \"Element\";\n  nodeName: string;\n  attributes: Record<string, MetaAttributeValues>;\n  children: MetaNode[];\n  cssProperties: MetaCSSPropertiesNode[];\n};\n\nexport type MetaHTMLElementInternal = Omit<\n  MetaHTMLElement,\n  \"children\" | \"attributes\"\n> & {\n  children: MetaNodeInternal[];\n  attributes: Record<string, MetaAttributeValuesInternal>;\n  node: HTMLElement;\n};\n\nexport type MetaCSSPropertiesNode =\n  | MetaCSSPropertiesConditionalNode\n  | MetaCSSPropertiesConstantNode;\n\nexport type MetaCSSPropertiesConstantNode = {\n  type: \"MetaCSSPropertiesConstantNode\";\n  cssPropertiesString: string;\n};\n\nexport type MetaCSSPropertiesConditionalNode = {\n  type: \"MetaCSSPropertiesConditionalNode\";\n  condition: { id: string; equalsString: string };\n  cssPropertiesString: string;\n};\n\nexport type MetaHTMLText = { type: \"Text\"; value: string };\n\nexport type MetaHTMLComment = { type: \"Comment\"; value: string };\n\nexport type MetaHTMLVariable = {\n  type: \"Variable\";\n  id: string;\n};\n\nexport type MetaHTMLVariableInternal = {\n  type: \"Variable\";\n  id: string;\n  optional: boolean;\n};\n\ntype MetaHTMLIfBase = {\n  type: \"If\";\n  children: MetaNode[];\n};\n\nexport type MetaHTMLIfSuccess = MetaHTMLIfBase & {\n  parseError: false;\n  ids: string[];\n  testAsJavaScriptExpression: string; // a string of codegen'd JS that can be used directly.\n  // Other languages should be added. PRs welcome.\n};\n\nexport type MetaHTMLIfFailure = MetaHTMLIfBase & {\n  parseError: true;\n  error: string;\n};\n\nexport type MetaHTMLIf = MetaHTMLIfSuccess | MetaHTMLIfFailure;\n\nexport type MetaHTMLIfSuccessInternal = Omit<MetaHTMLIfSuccess, \"children\"> & {\n  children: MetaNodeInternal[];\n  optional: boolean;\n};\n\nexport type MetaHTMLIfFailureInternal = Omit<MetaHTMLIfFailure, \"children\"> & {\n  children: MetaNodeInternal[];\n  optional: boolean;\n};\n\nexport type MetaHTMLIfInternal =\n  | MetaHTMLIfSuccessInternal\n  | MetaHTMLIfFailureInternal;\n\ntype NodeToMetaNodeProps = {\n  node: ChildNode;\n  log: Log;\n};\n\nfunction nodeToMetaNode({ node, log }: NodeToMetaNodeProps): MetaNodeInternal {\n  if (node.nodeType === Node.TEXT_NODE) {\n    return { type: \"Text\", value: node.textContent || \"\" };\n  } else if (node.nodeType === Node.COMMENT_NODE) {\n    return { type: \"Comment\", value: node.textContent || \"\" };\n  } else if (node.nodeType !== Node.ELEMENT_NODE) {\n    throw Error(`Unhandled nodeType ${node.nodeType}`);\n  }\n\n  // @ts-ignore\n  const htmlElement: HTMLElement = node;\n  const names = Array.from(htmlElement.getAttributeNames());\n  const nodeName = htmlElement.nodeName.toLowerCase();\n\n  if (nodeName === \"mt-variable\") {\n    return parseMetaVariable({ htmlElement, log });\n  } else if (nodeName === \"mt-if\") {\n    return {\n      ...parseMetaHTMLIf({ htmlElement, log }),\n      children: Array.from(node.childNodes).map((node) =>\n        nodeToMetaNode({ node, log })\n      ),\n    };\n  }\n\n  const attributes = names.reduce(\n    (attributes: MetaHTMLElementInternal[\"attributes\"], name: string) => {\n      const attributeValue = htmlElement.getAttribute(name);\n      if (attributeValue === null) throw Error(`Expected attribute value.`);\n      attributes[name] = parseAttributeValue(attributeValue, log);\n      return attributes;\n    },\n    {} as MetaHTMLElementInternal[\"attributes\"]\n  );\n\n  const cssProperties = getAllMatchingCSSProperties(htmlElement, attributes);\n\n  return {\n    type: \"Element\",\n    nodeName,\n    attributes: attributes,\n    node: htmlElement,\n    children: Array.from(node.childNodes).map((node) =>\n      nodeToMetaNode({ node, log })\n    ),\n    cssProperties,\n  };\n}\n\nfunction getAllMatchingCSSProperties(\n  element: HTMLElement,\n  attributes: MetaHTMLElement[\"attributes\"]\n): MetaCSSPropertiesNode[] {\n  const cssProperties: MetaCSSPropertiesNode[] = [];\n\n  resetElementAttributes(element, attributes);\n\n  const resetMatchedCSS = cssSniff([element], { ignoreChildren: true });\n\n  const cssPropertiesStringConstants = serializeCSSMatchesAsProperties(\n    resetMatchedCSS\n  );\n\n  if (cssPropertiesStringConstants) {\n    cssProperties.push({\n      type: \"MetaCSSPropertiesConstantNode\",\n      cssPropertiesString: cssPropertiesStringConstants,\n    });\n  }\n\n  Object.keys(attributes)\n    .filter(attributesThatCanBeSet)\n    .forEach((attributeName: string) => {\n      const resetValue = element.getAttribute(attributeName);\n      const attributeValues = attributes[attributeName];\n      attributeValues.forEach((attributeValue) => {\n        if (attributeValue.type === \"MetaAttributeVariableOptions\") {\n          Object.entries(attributeValue.options).forEach(\n            ([optionName, optionValue]) => {\n              element.setAttribute(\n                attributeName,\n                `${resetValue ? `${resetValue} ` : \"\"}${optionValue}`\n              );\n              const matchedCSS = cssSniff([element], { ignoreChildren: true });\n              const cssRoot = cssRootDiff(resetMatchedCSS, matchedCSS);\n              const cssPropertiesString = serializeCSSMatchesAsProperties(\n                cssRoot\n              );\n              if (cssPropertiesString) {\n                cssProperties.push({\n                  type: \"MetaCSSPropertiesConditionalNode\",\n                  condition: {\n                    id: attributeValue.id,\n                    equalsString: optionName,\n                  },\n                  cssPropertiesString,\n                });\n              }\n              if (resetValue) {\n                element.setAttribute(attributeName, resetValue);\n              }\n            }\n          );\n        }\n      });\n    });\n\n  return cssProperties;\n}\n\nfunction resetElementAttributes(\n  element: HTMLElement,\n  attributes: MetaHTMLElement[\"attributes\"]\n): void {\n  Object.keys(attributes)\n    .filter(attributesThatCanBeSet)\n    .forEach((name: string) => {\n      const attribute = attributes[name];\n      element.setAttribute(\n        name,\n        attribute\n          .map((metaAttribute) => {\n            if (metaAttribute.type === \"MetaAttributeConstant\") {\n              return ` ${metaAttribute.value}`;\n            }\n            // We can't predict what MetaAttributeVariable might be\n            return \"\";\n          })\n          .join(\" \")\n      );\n    });\n}\n\nfunction internalToPublic(nodes: MetaNodeInternal[]): MetaNode[] {\n  // discards the Node variable which shouldn't be exposed to consumers\n  function walk(node: MetaNodeInternal): MetaNode {\n    switch (node.type) {\n      case \"Comment\":\n      case \"Text\":\n        return node;\n      case \"Variable\":\n        return {\n          type: node.type,\n          id: node.id,\n        };\n      case \"If\":\n        if (node.parseError) {\n          return {\n            type: node.type,\n            parseError: node.parseError,\n            children: node.children,\n            error: node.error,\n          };\n        } else {\n          return {\n            type: node.type,\n            parseError: node.parseError,\n            ids: node.ids,\n            children: node.children,\n            testAsJavaScriptExpression: node.testAsJavaScriptExpression,\n          };\n        }\n      case \"Element\":\n        return {\n          type: node.type,\n          nodeName: node.nodeName,\n          attributes: walkAttributes(node.attributes),\n          cssProperties: node.cssProperties,\n          children: node.children.map(walk),\n        };\n      default:\n        throw Error(`Unrecognised node ${node}. ${JSON.stringify(node)}`);\n    }\n  }\n\n  const walkAttributes = (\n    internalAttributes: MetaHTMLElementInternal[\"attributes\"]\n  ): MetaHTMLElement[\"attributes\"] => {\n    const keys = Object.keys(internalAttributes);\n    return keys.reduce(\n      (\n        attributes: MetaHTMLElement[\"attributes\"],\n        key: string\n      ): MetaHTMLElement[\"attributes\"] => {\n        const values = internalAttributes[key];\n        const newAttributeValues = values.map(\n          (value): MetaAttributeValue => {\n            switch (value.type) {\n              case \"MetaAttributeConstant\": {\n                return value;\n              }\n              case \"MetaAttributeVariable\": {\n                return {\n                  type: value.type,\n                  id: value.id,\n                };\n              }\n              case \"MetaAttributeVariableOptions\": {\n                return {\n                  type: value.type,\n                  id: value.id,\n                  options: value.options,\n                };\n              }\n            }\n            return assertUnreachable(value);\n          }\n        );\n        attributes[key] = newAttributeValues;\n        return attributes;\n      },\n      {} as MetaHTMLElement[\"attributes\"]\n    );\n  };\n\n  return nodes.map(walk);\n}\n\nfunction getAllMatchingCSSRulesRecursively(nodes: MetaNodeInternal[]): string {\n  const matchedCSS: CSSSniffRoot = {};\n\n  function getAllMatchingCSSRules(\n    element: HTMLElement,\n    attributes: MetaHTMLElement[\"attributes\"],\n    matchedCSS: CSSSniffRoot\n  ) {\n    // Set ALL classes on element so we can find matching CSS rules.\n    //\n    // The htmlElement.className value looks like a string of,\n    //   \"thing {{ someId: class1 | class2 }} {{ someId: class3 as name1 | class4 as name2 }} \"\n    // so we want to turn that into a string of,\n    //   \"thing class1 class2 class3 class4\"\n    //\n    // In CSS the :not() could mean that adding other classes invalidates rules but MetaTemplate\n    // doesn't support that.\n\n    Object.keys(attributes)\n      .filter(attributesThatCanBeSet)\n      .forEach((name: string) => {\n        const newValue = attributes[name]\n          .map((metaAttribute) => {\n            if (metaAttribute.type === \"MetaAttributeConstant\") {\n              return ` ${metaAttribute.value}`;\n            } else if (metaAttribute.type === \"MetaAttributeVariableOptions\") {\n              return ` ${Object.values(metaAttribute.options).join(\" \")}`;\n            }\n            // Else, it's a MetaAttributeVariable.\n            // We can't predict what value MetaAttributeVariable would have so we can't\n            // support detecting CSS based on that\n            return \"\";\n          })\n          .join(\" \");\n\n        element.setAttribute(name, newValue);\n      });\n\n    cssSniff([element], { ignoreChildren: true }, matchedCSS);\n  }\n\n  function walk(node: MetaNodeInternal): void {\n    if (node.type !== \"Element\") return;\n    getAllMatchingCSSRules(node.node, node.attributes, matchedCSS);\n    node.children.forEach(walk);\n  }\n\n  nodes.forEach(walk);\n\n  return serializeCSSMatches(matchedCSS);\n}\n\nfunction attributesThatCanBeSet(attr: string): boolean {\n  // used to filter setting attributes on the real DOM\n  // we don't really care about any other attributes\n  return [\"class\"].includes(attr);\n}\n\nfunction assertUnreachable(x: never): never {\n  throw new Error(\"Didn't expect to get here\");\n}\n","import { MetaHTMLVariableInternal } from \"./metaTemplate\";\nimport { Log } from \"../log\";\n\ntype Props = {\n  htmlElement: HTMLElement;\n  log: Log;\n};\n\nexport const parseMetaVariable = ({\n  htmlElement,\n  log,\n}: Props): MetaHTMLVariableInternal => {\n  let id = htmlElement.getAttribute(\"id\") || htmlElement.getAttribute(\"key\"); // 'key' is legacy from MetaTemplate v1\n  if (!id) {\n    log(\n      `Expected to find 'id' (or 'key' for legacy support) attribute on mt-variable`\n    );\n    return { type: \"Variable\", id: \"\", optional: false };\n  }\n  const optional = htmlElement.hasAttribute(\"optional\") || id.includes(\"?\"); // inline '?' is legacy from MetaTemplate v1;\n  id = id.replace(/\\?/, \"\");\n  return { type: \"Variable\", id, optional };\n};\n","import {\n  MetaHTMLElement,\n  MetaHTMLText,\n  MetaHTMLComment,\n  MetaHTMLIf,\n  MetaHTMLVariable,\n} from \"../metaTemplate/metaTemplate\";\nimport { TemplateFiles } from \"../types\";\nimport { Props } from \"../metaTemplate/getProps\";\n\nexport interface TemplateFormat {\n  dirname: string;\n  templateId: string;\n\n  onElement: (element: MetaHTMLElement) => string;\n  onText: (text: MetaHTMLText) => void;\n  onComment: (text: MetaHTMLComment) => void;\n  onCloseElement: (closeElement: OnCloseElement) => void;\n  onVariable: (onVariable: MetaHTMLVariable) => void;\n  onIf: (onIf: MetaHTMLIf) => void;\n  onCloseIf: () => void;\n  serialize: (args: OnSerialize) => TemplateFiles;\n}\n\nexport type OnConstructor = {\n  templateId: string;\n  dirname?: string;\n  props: Props;\n  hasMultipleRootNodes: boolean;\n};\n\ntype OnCloseElement = {\n  openingElement: string;\n};\n\ntype OnSerialize = {\n  css: string;\n};\n\nexport class Template {\n  dirname: string;\n  templateId: string;\n  props: Props;\n  hasMultipleRootNodes: boolean;\n\n  constructor(args: OnConstructor) {\n    const { templateId, dirname, props, hasMultipleRootNodes } = args;\n    this.dirname = dirname || \"\";\n    this.templateId = templateId;\n    this.props = props;\n    this.hasMultipleRootNodes = hasMultipleRootNodes;\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    throw Error(\"Not implemented\");\n  }\n\n  onCloseElement(args: Parameters<TemplateFormat[\"onCloseElement\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onVariable(onVariable: Parameters<TemplateFormat[\"onVariable\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onCloseIf(): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onFinalise(): void {\n    throw Error(\"Not implemented\");\n  }\n\n  serialize(\n    onSerialize: Parameters<TemplateFormat[\"serialize\"]>[0]\n  ): TemplateFiles {\n    throw Error(\"Not implemented\");\n  }\n}\n","import prettier from \"prettier/standalone\";\nimport parserPostCSS from \"prettier/parser-postcss\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\n\nexport class CSSTemplate extends Template {\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"css\" });\n  }\n\n  onElement = (\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] => {\n    return onElement.nodeName;\n  };\n\n  onCloseElement = (\n    args: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ): void => {\n    // pass\n  };\n\n  onText = (onText: Parameters<TemplateFormat[\"onText\"]>[0]): void => {\n    // pass\n  };\n\n  onComment = (onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void => {\n    // pass\n  };\n\n  onVariable = (variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) => {\n    // pass\n  };\n\n  onIf = (onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) => {\n    // pass\n  };\n\n  onCloseIf = () => {\n    // pass\n  };\n\n  onFinalise = () => {\n    // pass\n  };\n\n  serialize = (\n    onSerialize: Parameters<TemplateFormat[\"serialize\"]>[0]\n  ): TemplateFiles => {\n    const { css } = onSerialize;\n\n    let newCSS = css;\n    try {\n      newCSS = prettier.format(newCSS, {\n        parser: \"scss\",\n        printWidth: 80,\n        plugins: [parserPostCSS],\n      });\n    } catch (e) {\n      // pass\n    }\n\n    return {\n      [`${this.dirname}/${this.templateId}.css`]: newCSS,\n    };\n  };\n}\n","import prettier from \"prettier/standalone\";\nimport parserHTML from \"prettier/parser-html\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\n\nexport class HTMLTemplate extends Template {\n  html: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"html\" });\n    this.html = \"\";\n  }\n\n  onElement = (\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] => {\n    const { nodeName, attributes } = onElement;\n\n    this.html += `<${nodeName}`;\n    Object.keys(attributes).forEach((name) => {\n      const attributeValues = attributes[name];\n      this.html += ` ${name}=\"${attributeValues\n        .map((attributeValue) => {\n          if (attributeValue.type === \"MetaAttributeConstant\") {\n            return attributeValue.value;\n          } else if (attributeValue.type === \"MetaAttributeVariableOptions\") {\n            const optionKeys = Object.keys(attributeValue.options);\n            if (optionKeys.length > 0) {\n              const firstKey = optionKeys[0];\n              const firstValue = attributeValue.options[firstKey];\n              return firstValue;\n            }\n            return \"\";\n          }\n          return \"\";\n        })\n        .filter((value) => value.length > 0)\n        .join(\"\")}\"`;\n    });\n    this.html += \">\";\n    return nodeName;\n  };\n\n  onCloseElement = (\n    onCloseElement: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ): void => {\n    const { openingElement } = onCloseElement;\n    this.html += `</${openingElement}>`;\n  };\n\n  onText = (onText: Parameters<TemplateFormat[\"onText\"]>[0]): void => {\n    const { value } = onText;\n    this.html += value;\n  };\n\n  onComment = (onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void => {\n    const { value } = onComment;\n    this.html += `<!--${value}-->`;\n  };\n\n  onVariable = (variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) => {\n    this.html += `<!-- '${variable.id}' goes here -->`;\n  };\n\n  onIf = (onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) => {\n    // pass\n  };\n\n  onCloseIf = () => {\n    // pass\n  };\n\n  onFinalise = () => {\n    try {\n      this.html = prettier.format(this.html, {\n        parser: \"html\",\n        printWidth: 80,\n        plugins: [parserHTML],\n      });\n    } catch (e) {\n      // pass\n    }\n  };\n\n  serialize = (\n    onSerialize: Parameters<TemplateFormat[\"serialize\"]>[0]\n  ): TemplateFiles => {\n    return {\n      [`${this.dirname}/${this.templateId}.html`]: this.html,\n    };\n  };\n}\n\n// Via http://xahlee.info/js/html5_non-closing_tag.html\nexport const SELF_CLOSING_HTML_ELEMENTS = [\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\",\n];\n","import capitalize from \"lodash/capitalize\";\n\nconst transform: Record<string, string> = {\n  class: \"className\",\n  for: \"htmlFor\",\n  autocomplete: \"autoComplete\",\n  \"fill-rule\": \"fillRule\",\n  readonly: \"readOnly\",\n  autofocus: \"autoFocus\",\n  srcset: \"srcSet\",\n  crossorigin: \"crossOrigin\",\n  spellcheck: \"spellCheck\",\n  tabindex: \"tabIndex\",\n  maxlength: \"maxLength\",\n  // TODO: expand this list... presumably there's an NPM package with these mappings?\n};\n\nexport function attributeNameTransform(attributeName: string): string {\n  // React uses JavaScript names not HTML names which can be different\n  // such as className=\"\" vs class=\"\" and htmlFor=\"\" vs for=\"\" and so on\n  // so we need to convert them...\n  return transform[attributeName] ? transform[attributeName] : attributeName;\n}\n\nexport function getTypeScriptElementName(tagName: string): string {\n  switch (tagName) {\n    case \"p\":\n    case \"h1\":\n    case \"h2\":\n    case \"h3\":\n    case \"h4\":\n    case \"h5\":\n    case \"h6\":\n      return \"\";\n    case \"a\": {\n      return \"Anchor\";\n    }\n    case \"img\": {\n      return \"Image\";\n    }\n    case \"textarea\": {\n      return \"TextArea\";\n    }\n    default: {\n      return capitalize(tagName);\n    }\n  }\n}\n","// All credit to https://stackoverflow.com/a/9337047\nexport const validJavaScriptIdentifer = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z\\_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\n","import prettier from \"prettier/standalone\";\nimport parserTypeScript from \"prettier/parser-typescript\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\nimport { attributeNameTransform, getTypeScriptElementName } from \"./React.util\";\nimport {\n  MetaAttributeValues,\n  MetaAttributeValue,\n} from \"../../metaTemplate/parseMetaHTMLAttribute\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\nexport class ReactTemplate extends Template {\n  imports: string;\n  render: string;\n  typeScript: string;\n  constants: string;\n  fileData: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: args.dirname || \"react\" });\n\n    this.imports = \"\";\n    this.render = \"\";\n    this.typeScript = \"\";\n    this.fileData = \"\";\n    this.constants = \"\";\n\n    this.setTypeScript = this.setTypeScript.bind(this);\n    this.renderPropType = this.renderPropType.bind(this);\n\n    this.setImports();\n    this.setTypeScript();\n    this.renderRenderFunction();\n  }\n\n  setImports() {\n    this.imports += `import React from 'react';\\n`;\n  }\n\n  setTypeScript() {\n    const props = Object.keys(this.props).map(this.renderPropType).join(\"\\n  \");\n    this.typeScript = `type Props = {\\n  ${props}\\n};`;\n  }\n\n  renderPropType(propId: string): string {\n    const prop = this.props[propId];\n    let propString = \"\";\n\n    propString += validJavaScriptIdentifer.test(propId)\n      ? propId\n      : `\"${propId}\"`;\n\n    if (!prop.required) {\n      propString += \"?\";\n    }\n\n    propString += \": \";\n\n    switch (prop.type) {\n      case \"PropTypeVariable\": {\n        propString += \"React.ReactNode;\";\n        break;\n      }\n      case \"PropTypeAttributeValue\": {\n        propString += `React.${getTypeScriptElementName(\n          prop.nodeName\n        )}HTMLAttributes<HTML${getTypeScriptElementName(\n          prop.nodeName\n        )}Element>[\"${attributeNameTransform(prop.attributeName)}\"];`;\n        break;\n      }\n      case \"PropTypeAttributeValueOptions\": {\n        propString += `${Object.keys(prop.options)\n          .map((key) => {\n            return validJavaScriptIdentifer.test(key) ? `\"${key}\"` : `\"${key}\"`;\n          })\n          .join(\" | \")};`;\n      }\n    }\n\n    return propString;\n  }\n\n  renderRenderFunction() {\n    const propIds = Object.keys(this.props);\n    const containsInvalidIdentifiers = propIds.some(\n      (propId) => !validJavaScriptIdentifer.test(propId)\n    );\n    if (containsInvalidIdentifiers) {\n      this.render += `export default function ${this.templateId}(props: Props){\\n`;\n      const destructure = propIds\n        .filter((key) => validJavaScriptIdentifer.test(key))\n        .join(\", \");\n      if (destructure) {\n        this.render += `  const { ${destructure} } = props;\\n`;\n      }\n    } else {\n      this.render += `export default function ${\n        this.templateId\n      }({ ${propIds.join(\", \")} }: Props){\\n`;\n    }\n    this.render += `  return (\\n`;\n    if (this.hasMultipleRootNodes) {\n      this.render += `<React.Fragment>`;\n    }\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n    this.render += `<${nodeName}`;\n    Object.keys(attributes).forEach((attributeName) => {\n      this.renderAttribute(attributeName, attributes[attributeName]);\n    });\n    this.render += \">\";\n    return nodeName;\n  }\n\n  renderAttribute(\n    attributeName: string,\n    attributeValues: MetaAttributeValues\n  ): void {\n    // TODO: escape attribute values and keys\n    const reactAttributeName = attributeNameTransform(attributeName);\n    this.render += ` ${reactAttributeName}=`;\n    const containsExpression = attributeValues.some(\n      (attributeValue) => attributeValue.type !== \"MetaAttributeConstant\"\n    );\n    const containsConstant = attributeValues.some(\n      (attributeValue) => attributeValue.type === \"MetaAttributeConstant\"\n    );\n\n    if (containsExpression) {\n      this.render += \"{\";\n    } else {\n      this.render += '\"';\n    }\n\n    if (containsExpression && containsConstant) {\n      this.render += \"`\";\n    }\n\n    attributeValues.forEach((attributeValue) => {\n      if (containsConstant && attributeValue.type !== \"MetaAttributeConstant\") {\n        this.render += \"${\";\n      }\n      this.renderAttributeValue(attributeValue);\n      if (containsConstant && attributeValue.type !== \"MetaAttributeConstant\") {\n        this.render += \" || ''}\";\n      }\n    });\n\n    if (containsExpression && containsConstant) {\n      this.render += \"`\";\n    }\n\n    if (containsExpression) {\n      this.render += \"}\";\n    } else {\n      this.render += '\"';\n    }\n  }\n\n  renderAttributeValue(attributeValue: MetaAttributeValue) {\n    switch (attributeValue.type) {\n      case \"MetaAttributeConstant\": {\n        this.render += attributeValue.value;\n        break;\n      }\n      case \"MetaAttributeVariable\": {\n        this.render += validJavaScriptIdentifer.test(attributeValue.id)\n          ? attributeValue.id\n          : `props[\"${attributeValue.id}\"]`;\n        break;\n      }\n      case \"MetaAttributeVariableOptions\": {\n        const identifier = validJavaScriptIdentifer.test(attributeValue.id)\n          ? attributeValue.id\n          : `props[\"${attributeValue.id}\"]`;\n\n        if (!this.props[attributeValue.id].required) {\n          this.render += `${identifier} && `;\n        }\n        this.render += `({${Object.keys(attributeValue.options).map(\n          (optionKey) => `\"${optionKey}\":\"${attributeValue.options[optionKey]}\"`\n        )}})[${identifier}]`;\n      }\n    }\n  }\n\n  onCloseElement(\n    onCloseElement: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ): void {\n    const { openingElement } = onCloseElement;\n    this.render += `\\n</${openingElement}>\\n`;\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    const { value } = onText;\n    this.render += value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    const { value } = onComment;\n    this.render += `<!--${value}-->`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    this.render += `{${\n      validJavaScriptIdentifer.test(variable.id)\n        ? variable.id\n        : `props[\"${variable.id}\"]`\n    }}`;\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    if (onIf.parseError === false) {\n      this.render += `{${onIf.testAsJavaScriptExpression} && (<React.Fragment>`;\n    } else {\n      this.render += `{false && (<React.Fragment>`;\n    }\n  }\n\n  onCloseIf() {\n    this.render += `</React.Fragment>)}`;\n  }\n\n  onFinalise() {\n    if (this.hasMultipleRootNodes) {\n      this.render += `</React.Fragment>`;\n    }\n\n    this.fileData = `${this.imports}\\n${this.typeScript}\\n\\n${this.constants}\\n\\n${this.render}\\n  )\\n};\\n`;\n\n    try {\n      this.fileData = prettier.format(this.fileData, {\n        parser: \"typescript\",\n        printWidth: 80,\n        plugins: [parserTypeScript],\n      });\n    } catch (e) {\n      // pass\n    }\n  }\n\n  serialize(\n    onSerialize: Parameters<TemplateFormat[\"serialize\"]>[0]\n  ): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.tsx`]: this.fileData,\n    };\n  }\n}\n","import uniq from \"lodash/uniq\";\nimport { ReactTemplate } from \"../React/React\";\nimport { TemplateFormat, OnConstructor } from \"../Template\";\nimport { MetaCSSPropertiesNode } from \"../../metaTemplate/metaTemplate\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\nexport class ReactStyledComponentsTemplate extends ReactTemplate {\n  styledConstants: string[];\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"react-styled-components\" });\n\n    this.imports += `import styled from 'styled-components';\\n`;\n\n    this.styledConstants = [];\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    let counter = 1;\n    let styledName;\n    do {\n      styledName = `Styled${onElement.nodeName\n        .substring(0, 1)\n        .toUpperCase()}${onElement.nodeName.substring(1)}${\n        counter === 1 ? \"\" : `_${counter}`\n      }`;\n      counter++;\n    } while (this.styledConstants.includes(styledName));\n    this.styledConstants.push(styledName);\n\n    const pickedProps = this.renderCSSPropertyProps(onElement.cssProperties);\n    const styledProps = `${styledName}Props`;\n\n    this.constants += `type ${styledProps} = ${pickedProps};\\n`;\n    this.constants += `const ${styledName} = styled.${\n      onElement.nodeName\n    }<${styledProps}>\\`\\n  ${onElement.cssProperties\n      .map((cssProperty) => this.renderCSSProperty(cssProperty, styledProps))\n      .join(\"\\n  \")}\\n\\`;\\n\\n`;\n    const styledAttributes = {\n      ...onElement.attributes,\n    };\n    delete styledAttributes[\"class\"];\n    onElement.cssProperties.forEach((cssProperty) => {\n      if (cssProperty.type === \"MetaCSSPropertiesConstantNode\") return;\n      styledAttributes[cssProperty.condition.id] = [\n        {\n          type: \"MetaAttributeVariable\",\n          id: cssProperty.condition.id,\n        },\n      ];\n    });\n\n    super.onElement({\n      ...onElement,\n      nodeName: styledName,\n      attributes: styledAttributes,\n    });\n\n    return styledName;\n  }\n\n  renderCSSProperty(\n    cssPropertiesNode: MetaCSSPropertiesNode,\n    styledProps: string\n  ): string {\n    switch (cssPropertiesNode.type) {\n      case \"MetaCSSPropertiesConstantNode\": {\n        return cssPropertiesNode.cssPropertiesString;\n      }\n      case \"MetaCSSPropertiesConditionalNode\": {\n        const isValidIdentifier = validJavaScriptIdentifer.test(\n          cssPropertiesNode.condition.id\n        );\n        let conditional = \"${\";\n        if (isValidIdentifier) {\n          conditional += `({${cssPropertiesNode.condition.id}}: ${styledProps}) => (${cssPropertiesNode.condition.id}`;\n        } else {\n          conditional += `(props: ${styledProps}) => (props[\"${cssPropertiesNode.condition.id}\"]`;\n        }\n        conditional += ` === \"${cssPropertiesNode.condition.equalsString}\") &&`;\n        conditional += ` \\`${cssPropertiesNode.cssPropertiesString}\\`}`;\n        return conditional;\n      }\n    }\n  }\n\n  renderCSSPropertyProps(cssProperties: MetaCSSPropertiesNode[]) {\n    return `Pick<Props, ${uniq(\n      cssProperties\n        .map((cssProperty): string => {\n          if (cssProperty.type === \"MetaCSSPropertiesConditionalNode\") {\n            return `\"${cssProperty.condition.id}\"`;\n          }\n          return \"\";\n        })\n        .filter((val: string): boolean => !!val)\n    ).join(\" | \")}>`;\n  }\n}\n","import { MetaTemplate } from \"../metaTemplate/metaTemplate\";\nimport { TemplateFiles } from \"../types\";\n\nimport { CSSTemplate } from \"./CSS/CSS\";\nimport { HTMLTemplate } from \"./HTML/HTML\";\nimport { ReactTemplate } from \"./React/React\";\nimport { ReactStyledComponentsTemplate } from \"./ReactStyledComponents/ReactStyledComponents\";\nimport { Template, OnConstructor } from \"./Template\";\n\ntype MakeTemplatesProps = {\n  templateId: string;\n  metaTemplate: MetaTemplate;\n};\n\nexport function makeTemplates({\n  templateId,\n  metaTemplate,\n}: MakeTemplatesProps): TemplateFiles {\n  const args: OnConstructor = {\n    props: metaTemplate.props,\n    templateId,\n    hasMultipleRootNodes: metaTemplate.nodes.length > 1,\n  };\n  return mergeTemplateFiles(\n    makeTemplate(templateId, metaTemplate, new HTMLTemplate(args)),\n    makeTemplate(templateId, metaTemplate, new CSSTemplate(args)),\n    makeTemplate(templateId, metaTemplate, new ReactTemplate(args)),\n    makeTemplate(\n      templateId,\n      metaTemplate,\n      new ReactStyledComponentsTemplate(args)\n    )\n  );\n}\n\nfunction mergeTemplateFiles(...obj: TemplateFiles[]): TemplateFiles {\n  return Object.assign({}, ...obj);\n}\n\nfunction makeTemplate(\n  templateId: string,\n  metaTemplate: MetaTemplate,\n  instance: Template\n) {\n  function walk(node: MetaTemplate[\"nodes\"][number]) {\n    switch (node.type) {\n      case \"Element\": {\n        const openingElement = instance.onElement(node);\n        node.children.forEach(walk);\n        instance.onCloseElement({ openingElement });\n        break;\n      }\n      case \"Text\": {\n        instance.onText(node);\n        break;\n      }\n      case \"Comment\": {\n        instance.onComment(node);\n        break;\n      }\n      case \"Variable\": {\n        instance.onVariable(node);\n        break;\n      }\n      case \"If\": {\n        instance.onIf(node);\n        node.children.forEach(walk);\n        instance.onCloseIf();\n        break;\n      }\n    }\n  }\n\n  metaTemplate.nodes.forEach(walk);\n\n  instance.onFinalise();\n\n  return instance.serialize({ css: metaTemplate.cssString });\n}\n","export type Log = (...args: any[]) => void;\n\nexport function logFactory(haltOnErrors: boolean): Log {\n  return (...args) => {\n    if (haltOnErrors) {\n      throw Array.from(args)\n        .map((arg) => arg.toString())\n        .join(\"\\n\");\n    }\n    console.log(...args, \"\");\n  };\n}\n","const LOCAL_STORAGE = \"LOCAL_STORAGE\" as const;\ntype LOCAL_STORAGE_TYPE = typeof LOCAL_STORAGE;\n\n/*\n *  DEVELOPER NOTE\n *\n *  Some browsers can block storage (localStorage, sessionStorage)\n *  access for privacy reasons, and all browsers can have storage\n *  that's full, and so they'll throw exceptions.\n *\n *  These exceptions can happen even with `if (window.localStorage)`!\n *\n *  Also sometimes localStorage/sessionStorage are enabled\n *  AFTER page load on mobiles. This is a browser bug we need to\n *  handle it gracefully.\n *\n *  So,\n *\n *****************************************************************\n *           we need to wrap all usage in try/catch\n *****************************************************************\n *\n *  and,\n *\n ****************************************************************\n *     we need to defer actual usage of these until necessary,\n *    hence using CONSTANTS to indirectly refer to these storages\n *     rather than window.localStorage/window.sessionStorage\n *                         directly\n ****************************************************************\n */\n\nconst storage = (STORAGE_TYPE: LOCAL_STORAGE_TYPE) => ({\n  setItem: (key: string, value: string) => {\n    if (typeof window === \"undefined\") return; // exit early for SSR\n    try {\n      STORAGE_TYPE === LOCAL_STORAGE\n        ? window.localStorage.setItem(key, value)\n        : window.sessionStorage.setItem(key, value);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  getItem: (key: string) => {\n    if (typeof window === \"undefined\") return; // exit early for SSR\n    try {\n      return STORAGE_TYPE === LOCAL_STORAGE\n        ? window.localStorage.getItem(key)\n        : window.sessionStorage.getItem(key);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  removeItem: (key: string) => {\n    try {\n      STORAGE_TYPE === LOCAL_STORAGE\n        ? window.localStorage.removeItem(key)\n        : window.sessionStorage.removeItem(key);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n});\n\nexport const localStorageWrapper = storage(LOCAL_STORAGE);\n","import React, { Fragment, useState, useRef, useEffect } from \"react\";\nimport marked from \"marked\";\nimport Modal from \"react-modal\";\nimport { generateTemplates, MetaTemplates } from \"./lib\";\nimport { localStorageWrapper } from \"./storage\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/mode-css\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"./App.css\";\n\nconst STORAGE_METAHTML = \"STORAGE_METAHTML\";\nconst STORAGE_CSS = \"STORAGE_CSS\";\nconst STORAGE_RESULT_INDEX = \"STORAGE_RESULT_INDEX\";\n\nconst oneFrameMs = 15;\n\nconst theme = \"monokai\";\n\nconst resultIndexString = localStorageWrapper.getItem(STORAGE_RESULT_INDEX);\nconst resultIndex = resultIndexString ? parseInt(resultIndexString, 10) : 0;\n\nconst defaultValues = {\n  metaHTML:\n    localStorageWrapper.getItem(STORAGE_METAHTML) ||\n    `<h1\\n  class=\"my-style {{ colour: my-style--blue as blue | my-style--red as red }}\"\\n>\\n  <mt-variable id=\"children\">\\n</h1>`,\n  css:\n    localStorageWrapper.getItem(STORAGE_CSS) ||\n    `.my-style { padding: 5px }\\n.my-style--blue{ color: blue }\\n.my-style--red{ color: red }\\n/* this CSS isn't used and will be tree shaken */\\n.treeShake { color: green; }`,\n  resultIndex,\n};\n\nconst templateId = \"MyComponent\";\n\nconst modalStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    zIndex: 10,\n  },\n  content: {\n    background: \"none\",\n    inset: \"0px\",\n  },\n} as const;\nModal.setAppElement(\"#root\");\n\nfunction App() {\n  const [metaHTML, setMetaHTML] = useState<string>(defaultValues.metaHTML);\n  const [css, setCSS] = useState<string>(defaultValues.css);\n  const [metaTemplates, setMetaTemplates] = useState<MetaTemplates>();\n  const [resultIndex, setResultIndex] = useState<number>(\n    defaultValues.resultIndex\n  );\n  const [isWhatOpen, setIsWhatOpen] = useState<boolean>(true);\n  const debounceTime = useRef<number>(100);\n  const iframeRef = useRef(null);\n\n  const openWhatModal = () => setIsWhatOpen(true);\n  const closeWhatModal = () => setIsWhatOpen(false);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      const iframeEl: HTMLIFrameElement | null = iframeRef.current;\n      if (!iframeEl) {\n        return;\n      }\n      // @ts-ignore\n      const domDocument = iframeEl.contentWindow?.document;\n      if (!domDocument) {\n        return;\n      }\n      const startTime = Date.now();\n      const result = generateTemplates({\n        domDocument,\n        templateId,\n        metaHTMLString: metaHTML,\n        cssString: css,\n        haltOnErrors: false,\n      });\n      const endTime = Date.now();\n      let newDebounceTime = endTime - startTime;\n      newDebounceTime =\n        newDebounceTime < oneFrameMs ? oneFrameMs : newDebounceTime;\n      console.log(`Debouncing calling MetaTemplate at ${newDebounceTime}ms`);\n      debounceTime.current = newDebounceTime;\n      setMetaTemplates(result);\n    }, debounceTime.current);\n    return () => clearTimeout(handler);\n  }, [metaHTML, css]);\n\n  const filePaths = metaTemplates ? Object.keys(metaTemplates.files) : [];\n\n  const outputValue = metaTemplates\n    ? resultIndex === 0\n      ? JSON.stringify(metaTemplates, null, 2)\n      : filePaths[resultIndex - 1]\n      ? metaTemplates.files[filePaths[resultIndex - 1]]\n      : \"\"\n    : \"\";\n\n  const outputMode =\n    resultIndex === 0\n      ? \"json\"\n      : filePaths[resultIndex - 1]\n      ? aceMode(filePaths[resultIndex - 1])\n      : \"json\";\n\n  const markers = [];\n  if (\n    resultIndex > 0 &&\n    filePaths[resultIndex - 1] &&\n    pathType(filePaths[resultIndex - 1]).includes(\"react\")\n  ) {\n    const templateIdIndex = outputValue.indexOf(templateId);\n    const outputValueBefore = outputValue.substring(0, templateIdIndex);\n    const rowIndex =\n      outputValueBefore.length - outputValueBefore.replace(/\\n/g, \"\").length;\n\n    const startCol = outputValue.split(\"\\n\")[rowIndex].indexOf(templateId);\n\n    markers.push({\n      startRow: rowIndex,\n      startCol,\n      endRow: rowIndex,\n      endCol: startCol + templateId.length - 1,\n      className: \"mt-tooltip\",\n      type: \"text\" as const,\n      inFront: true,\n    });\n  }\n\n  return (\n    <Fragment>\n      <Modal\n        isOpen={isWhatOpen}\n        onRequestClose={closeWhatModal}\n        style={modalStyles}\n        contentLabel=\"What is MetaHTML?\"\n        shouldCloseOnOverlayClick={true}\n      >\n        <div className=\"modal-content\" onClick={closeWhatModal}>\n          <div\n            className=\"modal-content__body\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button onClick={closeWhatModal} className=\"close_button\">\n              ✘close\n            </button>\n            <div dangerouslySetInnerHTML={{ __html: whatIsMetaHTML }}></div>\n            <button onClick={closeWhatModal} className=\"close_button\">\n              ✘close\n            </button>\n          </div>\n        </div>\n      </Modal>\n      <div className=\"MetaTemplateDemo\">\n        <h1 className=\"title_container\">MetaTemplate REPL</h1>\n        <fieldset className=\"html_container\">\n          <legend>\n            MetaHTML\n            <button onClick={openWhatModal} className=\"what-button\">\n              (MetaHTML?)\n            </button>\n          </legend>\n          <AceEditor\n            mode=\"html\"\n            theme={theme}\n            onChange={(val) => {\n              setMetaHTML(val);\n              localStorageWrapper.setItem(STORAGE_METAHTML, val);\n            }}\n            name=\"html\"\n            value={metaHTML}\n            width=\"100%\"\n            height=\"100%\"\n            showGutter={false}\n            showPrintMargin={false}\n          />\n        </fieldset>\n\n        <fieldset className=\"css_container\">\n          <legend>Standard CSS</legend>\n          <AceEditor\n            mode=\"css\"\n            theme={theme}\n            onChange={(val) => {\n              setCSS(val);\n              localStorageWrapper.setItem(STORAGE_CSS, val);\n            }}\n            name=\"css\"\n            value={css}\n            width=\"100%\"\n            height=\"100%\"\n            showGutter={false}\n            showPrintMargin={false}\n          />\n        </fieldset>\n\n        <iframe\n          id=\"iframe\"\n          src=\"./iframe.html\"\n          className=\"iframe_container\"\n          title=\"MetaTemplate iframe\"\n          ref={iframeRef}\n        ></iframe>\n\n        <fieldset className=\"output_container\">\n          <legend>\n            Output &nbsp;\n            <button\n              role=\"tab\"\n              aria-selected={resultIndex === 0}\n              className={`tab ${\n                resultIndex === 0 ? \"tab--selected\" : undefined\n              }`}\n              aria-controls=\"output\"\n              id=\"tab-0\"\n              onClick={(e) => {\n                const resultIndex = 0;\n                setResultIndex(resultIndex);\n                localStorageWrapper.setItem(\n                  STORAGE_RESULT_INDEX,\n                  resultIndex.toString()\n                );\n              }}\n            >\n              Everything\n            </button>\n            {metaTemplates\n              ? Object.keys(metaTemplates.files).map((file, fileIndex) => (\n                  <button\n                    role=\"tab\"\n                    aria-selected={resultIndex === fileIndex + 1}\n                    className={`tab ${\n                      resultIndex === fileIndex + 1\n                        ? \"tab--selected\"\n                        : undefined\n                    }`}\n                    aria-controls=\"output\"\n                    id={`tab-${fileIndex + 1}`}\n                    onClick={(e) => {\n                      const resultIndex = fileIndex + 1;\n                      setResultIndex(resultIndex);\n                      localStorageWrapper.setItem(\n                        STORAGE_RESULT_INDEX,\n                        resultIndex.toString()\n                      );\n                    }}\n                  >\n                    {pathType(file)}\n                  </button>\n                ))\n              : null}\n          </legend>\n\n          <AceEditor\n            mode={outputMode}\n            theme={theme}\n            name=\"output\"\n            value={outputValue}\n            readOnly\n            width=\"100%\"\n            height=\"100%\"\n            showPrintMargin={false}\n            showGutter={false}\n            markers={markers}\n          />\n        </fieldset>\n      </div>\n    </Fragment>\n  );\n}\n\nfunction aceMode(file: string) {\n  const dirname = file.substring(0, file.indexOf(\"/\"));\n  if (dirname === \"react\") {\n    return \"javascript\";\n  }\n  return dirname;\n}\n\nfunction pathType(file: string) {\n  return file.substring(0, file.indexOf(\"/\"));\n}\n\nexport default App;\n\nconst whatIsMetaHTML = marked(`\n#### MetaHTML ?\n\nThe reason why we need to use non-standard HTML is to know which parts should be configurable, as variables.\n\nMetaHTML is standard HTML with two types of variables, for attributes and elements:\n\n- in attributes:\n  - For making a required variable string write \\`{{ variableName }}\\` eg \\`<span class=\"{{ class }}\">\\`\n    - Use a \\`?\\` after the variable name to make it optional \\`{{ someVariable? }}\\`.\n    - Multiple variables can exist in an attribute value, write them like \\`<span class=\"{{ class }}{{ otherClass }}\">\\`\n  - For making a required variable with enumerations \\`{{ variableName: option1 | option2 }}\\` eg \\`<span class=\"{{ color: class-red | class-blue }}\">\\`\n  - For making a variable with enumerations that have friendly names \\`{{ variableName: option1 as Option1 | option2 as Option2 }}\\` eg \\`&lt;span class=\"{{ color: class-red as Red | class-blue as Blue }}\">\\`\n\n- Those variables that are childNodes between elements:\n  - Use \\`<mt-variable key=\"variableName\">default value</mt-variable>\\` eg if you want a component variable named \"children\" in an \\`&lt;h1>\\` you'd write \\`<h1><mt-variable key=\"children\">placeholder</mt-variable></h1>\\`\n\nThere is also template \\`if\\` support as \\`<mt-if test=\"isShown\">thing to show</mt-if>\\`.\n\nMetaTemplate is only supposed to make stateless components. All variables are \n`);\n\nconsole.log(whatIsMetaHTML);\n","// MetaTemplate WebTemplateTranslator\nimport {\n  parseMetaTemplateString,\n  MetaTemplate,\n} from \"./metaTemplate/metaTemplate\";\nimport { makeTemplates } from \"./makeTemplates/makeTemplates\";\nimport { TemplateFiles } from \"./types\";\nimport { logFactory } from \"./log\";\n\ntype Props = {\n  domDocument: Document;\n  templateId: string;\n  metaHTMLString: string;\n  cssString: string;\n  haltOnErrors: boolean;\n};\n\nexport type MetaTemplates = {\n  metaTemplate: MetaTemplate;\n  files: TemplateFiles;\n};\n\nexport function generateTemplates({\n  domDocument,\n  templateId,\n  metaHTMLString,\n  cssString,\n  haltOnErrors,\n}: Props): MetaTemplates {\n  const metaTemplate = parseMetaTemplateString({\n    domDocument,\n    metaHTMLString,\n    cssString,\n    log: logFactory(haltOnErrors),\n  });\n\n  return {\n    metaTemplate,\n    files: makeTemplates({ templateId, metaTemplate }),\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}