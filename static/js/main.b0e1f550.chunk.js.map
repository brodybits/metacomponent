{"version":3,"sources":["peacock.png","lib/metaComponent/parseMetaHTML.ts","lib/metaComponent/parseMetaHTMLAttribute.ts","lib/cssSniff/cssSniff.ts","lib/metaComponent/parseMetaHTMLIf.ts","lib/metaComponent/getProps.ts","lib/makeTemplates/utils.ts","lib/metaComponent/metaComponent.ts","lib/metaComponent/parseMetaVariable.ts","lib/makeTemplates/Template.ts","lib/makeTemplates/CSS/CSS.ts","lib/makeTemplates/HTML/HTML.ts","lib/makeTemplates/React/React.util.ts","lib/makeTemplates/React/React.ts","lib/makeTemplates/ReactStyledComponents/ReactStyledComponents.ts","lib/makeTemplates/Mustache/Mustache.ts","lib/makeTemplates/Vue/Vue.ts","lib/makeTemplates/Vue-JSX/Vue-JSX.ts","lib/makeTemplates/Angular/Angular.ts","lib/makeTemplates/Django/Django.ts","lib/makeTemplates/makeTemplates.ts","lib/log.ts","storage.tsx","App.tsx","lib/index.ts","index.tsx"],"names":["module","exports","parseHTMLWithoutInsertionMode","domDocument","metaHTMLString","cssString","log","documentString","html","parsingModeTags","replace","match","closingTag","tagName","isClosingTag","response","includes","MT_ALIAS_ATTR","aliasParsingModeElements","wrapBodyHtml","documentElement","innerHTML","doc","Array","from","querySelectorAll","forEach","alias","getAttribute","childNodes","unaliased","createElement","parentNode","insertBefore","childNode","appendChild","getAttributeNames","filter","name","toLowerCase","attr","previousAttributeValue","setAttribute","removeChild","restoreParsingModeElements","childlessElementName","childlessElement","lastChild","nextElementSibling","moveChildlessElements","parseMetaAttributeVariable","dk","optionalRegexp","RegExp","separatorIndex","indexOf","keySegment","substring","isOptional","trim","endsWith","type","id","required","options","length","split","reduce","option","parts","cssSniff","children","matchedCSS","matched","child","nodeType","Node","ELEMENT_NODE","el","sniffRoot","sheets","ownerDocument","styleSheets","Error","sheetsArray","i","sheet","cssRulesArray","cssRules","sheetIsAllowed","cssSniffStyleSheet","_filterCSSRulesByElement","getCSSMatchesByElement","ignoreChildren","rules","rule","selectorText","cssStyleRule","sanitisedSelector","ruleString","whitelisted","blacklisted","whitelistRules","whitelist","ruleMatches","isArray","some","ruleMatch","blacklistRules","blacklist","ruleIsAllowed","selectors","selector","splitted","parens","angulars","soFar","len","char","push","splitSelectors","normalizedSelector","unique","matches","existingCSSSniffStyleRule","cssSniffStyleRule","properties","cssText","lastIndexOf","e","console","error","trimmedSelector","media","cssMediaRule","conditionText","mediaString","whitelistMedia","mediaMatches","mediaMatch","blacklistMedia","mediaIsAllowed","existingMediaRule","childrenRules","Object","keys","before","ownerNode","checkStylesheet","sheetMatch","nodeName","nodeAttrs","attributes","attrs","value","JSON","stringify","whitelistStylesheets","stylesheet","blacklistStylesheets","serializeCSSMatchesAsProperties","values","map","childRule","join","parseMetaHTMLIf","htmlElement","optional","hasAttribute","test","testAsJavaScriptExpression","testAsPythonExpression","testAsPHPExpression","ids","AST","parseExpression","node","identifierName","findIdentifiers","generate","code","toPython","left","to2CharOperator","operator","right","toPHP","parseError","toString","astNode","stringToDjangoVar","str","getProps","nodes","props","walk","attributeName","attributeValuePart","validJavaScriptIdentifer","assertUnreachable","x","parseMetaComponentString","body","nodeToMetaNode","TEXT_NODE","textContent","COMMENT_NODE","names","parseMetaVariable","attributeValue","metaHTMLAttributeValueString","remaining","startIndex","endIndex","dkString","metaVariable","parseAttributeValue","cssProperties","element","attributesThatCanBeSet","attribute","metaAttribute","resetElementAttributes","resetMatchedCSS","cssPropertiesStringConstants","cssPropertiesString","resetValue","conditionalNode","condition","entries","optionName","optionValue","a","b","diff","bSheetIndex","bSheet","bRuleIndex","bRule","diffStyleSheet","diffRule","aRule","diffChildren","bRuleChildIndex","cssRootDiff","getAllMatchingCSSProperties","getAllMatchingCSSRulesRecursively","internalToPublic","walkAttributes","internalAttributes","key","newAttributeValues","newValue","getAllMatchingCSSRules","css","sheetIndex","ruleIndex","childRuleIndex","serializeCSSMatches","Template","args","dirname","templateId","hasMultipleRootNodes","this","onElement","onText","onComment","onVariable","onCloseVariable","onIf","onCloseIf","onFinalise","CSSTemplate","variable","closeVariable","prettier","format","parser","printWidth","plugins","parserPostCSS","HTMLTemplate","attributeValues","optionKeys","firstKey","onCloseElement","openingElement","parserHTML","transform","class","for","autocomplete","readonly","autofocus","srcset","crossorigin","spellcheck","tabindex","maxlength","attributeNameTransform","getTypeScriptElementName","capitalize","ReactTemplate","imports","renderPrefix","render","renderSuffix","typeScript","constants","fileData","fragmentStrings","start","end","setTypeScript","bind","renderPropType","setImports","renderRenderFunction","propId","prop","propString","propIds","destructure","renderAttribute","reactAttributeName","containsExpression","containsConstant","renderAttributeValue","identifier","onSerialize","renderFunction","parserTypeScript","ReactStyledComponentsTemplate","styledConstants","counter","styledName","toUpperCase","pickedProps","renderCSSPropertyProps","styledProps","cssProperty","renderCSSProperty","styledAttributes","cssPropertiesNode","isValidIdentifier","conditional","propUnion","uniq","val","MustacheTemplate","data","unescapedVariables","isOmittedIfEmpty","attributeVariable","renderIf","expression","unescaped","VueTemplate","template","script","style","extendPropsString","propsString","computed","finalData","setPropsString","getNewComputedName","containsOnlyConstants","every","computedName","computedProp","identifiers","responseType","propExpression","startCase","undefined","computedString","propName","containsInvalidIdentifiers","spreadProps","computeFunction","componentVarName","parserAngular","VueJSXTemplate","vue","result","spreadConstProps","AngularTemplate","DjangoTemplate","index","arr","exp","makeTemplates","metaComponent","obj","assign","mergeTemplateFiles","makeTemplate","instance","serialize","logFactory","haltOnErrors","arg","STORAGE_TYPE","localStorageWrapper","setItem","window","localStorage","sessionStorage","getItem","removeItem","showEverything","document","location","search","hashState","hash","parseInt","Number","isNaN","resultIndexString","resultIndex","defaultValues","metaHTML","modalStyles","overlay","backgroundColor","zIndex","border","content","background","inset","top","bottom","Flash","text","timer","useRef","useState","animate","setAnimate","onKeyPress","current","setTimeout","clearTimeout","className","pathType","file","formatName","Modal","setAppElement","App","setMetaHTML","setCSS","metaComponents","setMetaComponents","setResultIndex","isWhatOpen","setIsWhatOpen","isWhyOpen","setIsWhyOpen","debounceTime","iframeRef","closeWhatModal","openWhyModal","closeWhyModal","useEffect","root","querySelector","classList","add","remove","iframeRefCallback","useCallback","handler","iframeEl","contentWindow","startTime","Date","now","files","generateTemplates","newDebounceTime","info","filePaths","outputValue","outputMode","aceMode","markers","templateIdIndex","outputValueBefore","rowIndex","startCol","startRow","endRow","endCol","inFront","isOpen","onRequestClose","contentLabel","shouldCloseOnOverlayClick","onClick","stopPropagation","aria-hidden","aria-label","aria-expanded","aria-controls","dangerouslySetInnerHTML","__html","whatIsMetaHTML","whyIsMetaComponent","href","target","rel","src","peacock","alt","mode","theme","onChange","width","height","showGutter","showPrintMargin","title","ref","role","aria-selected","fileIndex","formatBriefName","readOnly","marked","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b0e1f550.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/peacock.03b69fcf.png\";","import { Log } from \"../log\";\n// Combine metaHTML and CSS in an HTML document string, and restore parsing mode\n// problems.\n//\n// Some tags like <select> and <tbody> etc., invoke HTML5 parsing modes\n// that only allow certain tags within them, or they rearrange the tree\n// based on those tags, so we need to alias them. See\n// https://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#the-insertion-mode\n// So that would mean we couldn't have tags like,\n//\n// <select>\n//   <mt-variable key=\"children\">placeholder</mt-variable>\n// </select>\n//\n// So instead we'll turn that into,\n//\n// <mt-alias-select>\n//   <mt-variable key=\"children\">placeholder</mt-variable>\n// </mt-alias-select>\n//\n// and then rename the element after parsing\n\ntype Props = {\n  domDocument: Document;\n  metaHTMLString: string;\n  cssString: string;\n  log: Log;\n};\n\nexport function parseHTMLWithoutInsertionMode({\n  domDocument,\n  metaHTMLString,\n  cssString,\n  log,\n}: Props): void {\n  const documentString = wrapBodyHtml(metaHTMLString, cssString);\n  domDocument.documentElement.innerHTML = documentString;\n\n  restoreParsingModeElements(domDocument, log);\n  moveChildlessElements(domDocument);\n}\n\nfunction wrapBodyHtml(metaHTMLString: string, cssString: string): string {\n  return `<head><style>${cssString}</style></head><body>${aliasParsingModeElements(\n    metaHTMLString\n  )}</body>`;\n}\n\nconst MT_ALIAS_TAG = \"mt-\";\nconst MT_ALIAS_ATTR = \"data-mt-original-element-name\";\n\nfunction aliasParsingModeElements(html: string): string {\n  const parsingModeTags = [\n    \"table\",\n    \"thead\",\n    \"tbody\",\n    \"tfoot\",\n    \"tr\",\n    \"caption\",\n    \"select\",\n    \"option\",\n  ];\n\n  return html.replace(/<([/]?)([^ >]+)/gi, (match, closingTag, tagName) => {\n    const isClosingTag = !!closingTag;\n    let response = `<${isClosingTag ? \"/\" : \"\"}`;\n    if (parsingModeTags.includes(tagName)) {\n      response += MT_ALIAS_TAG;\n      if (!isClosingTag) {\n        response += ` ${MT_ALIAS_ATTR}=\"${tagName}\" `;\n      }\n    } else {\n      response += tagName;\n    }\n    return response;\n  });\n}\n\nfunction restoreParsingModeElements(domDocument: Document, log: Log): void {\n  const doc = domDocument;\n  const aliases = Array.from(doc.querySelectorAll(MT_ALIAS_TAG));\n  aliases.forEach((alias: Element) => {\n    if (!alias) return;\n    const tagName = alias.getAttribute(MT_ALIAS_ATTR);\n    if (!tagName) {\n      log(`MetaComponent: ${MT_ALIAS_TAG} missing ${MT_ALIAS_ATTR} attribute.`);\n      return;\n    }\n    const childNodes = Array.from(alias.childNodes);\n    const unaliased = doc.createElement(tagName);\n    if (!alias.parentNode) {\n      log(\"MetaComponent parsing mode element must not be top-level.\");\n      return;\n    }\n    alias.parentNode.insertBefore(unaliased, alias);\n    childNodes.forEach((childNode) => {\n      unaliased.appendChild(childNode);\n    });\n    const attrs = alias.getAttributeNames().filter(\n      (name) => name.toLowerCase() !== MT_ALIAS_ATTR.toLowerCase() // because DOMs can lowercase attributes so we need a case-insensitive string comparison\n    );\n    attrs.forEach((attr) => {\n      const previousAttributeValue = alias.getAttribute(attr);\n      if (!previousAttributeValue) {\n        log(\"MetaComponent: must have a previous attribute value\");\n        return;\n      }\n      unaliased.setAttribute(attr, previousAttributeValue);\n    });\n    alias.parentNode.removeChild(alias);\n  });\n}\n\nfunction moveChildlessElements(domDocument: Document) {\n  const childlessElementNames: string[] = [];\n  childlessElementNames.forEach((childlessElementName: string): void => {\n    Array.from(domDocument.querySelectorAll(childlessElementName)).forEach(\n      (childlessElement: Element) => {\n        while (childlessElement.lastChild) {\n          childlessElement.parentNode?.insertBefore(\n            childlessElement.lastChild,\n            childlessElement.nextElementSibling\n          );\n        }\n      }\n    );\n  });\n}\n","import { Log } from \"../log\";\n\nexport const parseAttributeValue = (\n  metaHTMLAttributeValueString: string,\n  log: Log\n): MetaAttributeValuesInternal => {\n  const response: MetaAttributeValuesInternal = [];\n  let remaining: string = metaHTMLAttributeValueString;\n  const start = \"{{\" as const;\n  const end = \"}}\" as const;\n\n  while (remaining.length) {\n    const startIndex = remaining.indexOf(start);\n\n    if (startIndex === -1) {\n      // no MetaAttributeVariable, just string remainings\n      response.push({\n        type: \"MetaAttributeConstant\",\n        value: remaining,\n      });\n      remaining = \"\";\n    } else if (startIndex === 0) {\n      // a MetaAttributeVariable\n      const endIndex = remaining.indexOf(end, startIndex);\n      if (endIndex === -1) {\n        log(`Attribute with ${start} but no ${end}.`);\n        return response;\n      }\n      const dkString = remaining.substring(start.length, endIndex);\n      const metaVariable = parseMetaAttributeVariable(dkString);\n      response.push(metaVariable);\n      remaining = remaining.substring(endIndex + end.length);\n    } else {\n      // string before another MetaVariable\n      response.push({\n        type: \"MetaAttributeConstant\",\n        value: remaining.substring(0, startIndex),\n      });\n      remaining = remaining.substring(startIndex);\n    }\n  }\n  return response;\n};\n\nexport const parseMetaAttributeVariable = (\n  dk: string\n): MetaAttributeVariableInternal | MetaAttributeVariableOptionsInternal => {\n  const SEPARATOR = \":\";\n  const ENUM_SEPARATOR = \"|\";\n  const OPTIONAL = \"?\";\n\n  const escapeTextForRegex = (text: string) => {\n    return text.replace(/([()[{*+.$^\\\\|?])/g, \"\\\\$1\");\n  };\n\n  const optionalRegexp = new RegExp(`${escapeTextForRegex(OPTIONAL)}$`); // regex anchored to end of string\n\n  const separatorIndex = dk.indexOf(SEPARATOR);\n  let keySegment = separatorIndex === -1 ? dk : dk.substring(0, separatorIndex);\n  keySegment = keySegment.trim();\n  const isOptional = keySegment.endsWith(OPTIONAL);\n  if (isOptional) {\n    keySegment = keySegment.replace(optionalRegexp, \"\");\n  }\n\n  if (separatorIndex === -1) {\n    // chance to exit early\n    return {\n      type: \"MetaAttributeVariable\",\n      id: keySegment,\n      required: !isOptional,\n    };\n  }\n\n  const options: Record<string, string> = dk\n    .substring(separatorIndex + SEPARATOR.length)\n    .split(ENUM_SEPARATOR)\n    .reduce((options: Record<string, string>, option: string): Record<\n      string,\n      string\n    > => {\n      // An option is a string that looks like either,\n      //    \" valueThatIsAlsoName \"\n      //    \" value as friendlyName \"\n      // so when split by \" as \" it will have either\n      // 1 or 2 array items.\n      const parts: string[] = option.split(\" as \");\n      const name = parts.length === 2 ? parts[1].trim() : parts[0].trim();\n      if (name.length > 0) {\n        options[name] = parts[0].trim();\n      }\n      return options;\n    }, {});\n\n  return {\n    type: \"MetaAttributeVariableOptions\",\n    id: keySegment,\n    required: !isOptional,\n    options,\n  };\n};\n\nexport type MetaAttributeVariable = {\n  type: \"MetaAttributeVariable\";\n  id: string;\n};\n\nexport type MetaAttributeVariableOptions = {\n  type: \"MetaAttributeVariableOptions\";\n  id: string;\n  options: Record<string, string>;\n};\n\nexport type MetaAttributeConstant = {\n  type: \"MetaAttributeConstant\";\n  value: string;\n};\n\ntype MetaAttributeVariableInternal = MetaAttributeVariable & {\n  required: boolean;\n};\ntype MetaAttributeVariableOptionsInternal = MetaAttributeVariableOptions & {\n  required: boolean;\n};\n\nexport type MetaAttributeValueInternal =\n  | MetaAttributeConstant\n  | MetaAttributeVariableInternal\n  | MetaAttributeVariableOptionsInternal;\n\nexport type MetaAttributeValuesInternal = MetaAttributeValueInternal[];\n\nexport type MetaAttributeValue =\n  | MetaAttributeConstant\n  | MetaAttributeVariable\n  | MetaAttributeVariableOptions;\n\nexport type MetaAttributeValues = MetaAttributeValue[];\n","type Options = {\n  ignoreChildren?: boolean;\n  whitelist?: { stylesheet?: string; media?: string; rule?: string };\n  blacklist?: { stylesheet?: string; media?: string; rule?: string };\n};\n\nexport type CSSSniffRoot = {\n  [sheetIndex: string]: CSSSniffStyleSheet;\n};\n\nexport type CSSSniffStyleSheet = {\n  [ruleIndex: string]: CSSSniffStyleRule | CSSSniffMediaRule;\n};\n\nexport type CSSSniffStyleRule = {\n  type: \"CSSSniffStyleRule\";\n  selectors: string[];\n  properties: string;\n};\n\nexport type CSSSniffMediaRule = {\n  type: \"CSSSniffMediaRule\";\n  before: string;\n  children: CSSSniffStyleSheet;\n};\n\nexport function cssSniff(\n  children: ChildNode[],\n  options: Options,\n  matchedCSS?: CSSSniffRoot\n): CSSSniffRoot {\n  const matched: CSSSniffRoot = matchedCSS || {};\n\n  children.forEach((child) => {\n    if (child.nodeType !== Node.ELEMENT_NODE) {\n      // only Elements can have CSS (ie, text nodes can't have CSS)\n      return;\n    }\n    // @ts-ignore\n    const el: HTMLElement = child;\n    getCSSMatchesByElement(el, options, matched);\n    if (!options.ignoreChildren && el.childNodes) {\n      cssSniff(Array.from(el.childNodes), options, matched);\n    }\n  });\n\n  return matched;\n}\n\nfunction getCSSMatchesByElement(\n  el: HTMLElement,\n  options: Options,\n  sniffRoot: CSSSniffRoot\n): void {\n  if (el.nodeType !== Node.ELEMENT_NODE) {\n    return;\n  }\n\n  const sheets = el.ownerDocument?.styleSheets;\n  if (!sheets) {\n    throw Error(`Expected to find stylesheets of Node.`);\n  }\n  // @ts-ignore\n  const sheetsArray: CSSStyleSheet[] = Array.from(sheets);\n\n  for (let i in sheetsArray) {\n    const sheet = sheetsArray[i];\n\n    const cssRulesArray = Array.from(sheet.cssRules);\n\n    if (sheetIsAllowed(sheet, options)) {\n      const cssSniffStyleSheet: CSSSniffStyleSheet = sniffRoot[i] || {};\n      sniffRoot[i] = cssSniffStyleSheet;\n      _filterCSSRulesByElement(el, cssRulesArray, options, cssSniffStyleSheet);\n    }\n  }\n}\n\nfunction _filterCSSRulesByElement(\n  el: HTMLElement,\n  rules: CSSRule[],\n  options: Options,\n  cssSniffStyleSheet: CSSSniffStyleSheet // is mutated\n): void {\n  for (let i in rules) {\n    const rule = rules[i];\n\n    // @ts-ignore\n    if (rule.selectorText) {\n      // @ts-ignore\n      const cssStyleRule: CSSStyleRule = rule;\n      const sanitisedSelector = cssStyleRule.selectorText.replace(\n        /@charset.*?;/g,\n        \"\"\n      );\n\n      if (ruleIsAllowed(sanitisedSelector, options)) {\n        const selectors = splitSelectors(sanitisedSelector);\n\n        selectors.forEach((selector) => {\n          let trimmedSelector;\n          let normalizedSelector;\n\n          try {\n            // Exceptions may be thrown about browser-specific\n            // selectors such as\n            //\n            //   input::-moz-something\n            //   input::-webkit-something\n            //   input::-ms-something\n            //   input:-moz-something\n            //   input:-webkit-something\n            //   input:-ms-something\n            //\n            // or potentially selectors without anything before\n            // the \":\",\n            //\n            //   ::-moz-something\n            //   :not(input)\n            //\n            // and there are also escaped selectors like,\n            //\n            //   .link.\\:link\n            //\n            //  (used like <input class=\"link :link\">)\n            //\n            // and pseudo-elements like,\n            //\n            //   span::before\n            //\n            // where the \"::before\" is irrelevant to whether the\n            // selector matches the element so we should remove it.\n            //\n            // and\n            //\n            //   input:first-child\n            //   p > :first-child\n            //\n            // where we should change to\n            //   input\n            //   p > *\n            // respectively because we can't know HTML structure.\n            //\n            // So given all those scenarios we have the following logic,\n            //\n            // 1) If it starts with \":\" without anything preceding we'll\n            //    consider it a match because it could be.\n            //    (maybe this should be configurable?)\n            //\n            // 2) If it has a \":\" in it that's not preceded by \"\\\" then\n            //    we remove to the end of the selector. ie,\n            //    input:-moz-something -> input\n            //    input\\:-moz-something -> input\\:-moz-something\n            //    input::before -> input::before\n            //    input\\:\\:moz-something -> input\\:\\:moz-something\n\n            // PRE-NORMALISATON\n            // Temporarily replace \"\\:\" (escaped colon) to simplify\n            // removing \":something\" (real colon) which we restore later.\n            normalizedSelector = selector.replace(/\\\\:/g, unique).trim();\n\n            // START OF NORMALIZATION\n            // The goal here is to anticipate any possible node states that\n            // might match this node (ie, \"\":checked\" or adjacent sibling/hierarchical\n            // selectors)\n\n            normalizedSelector = normalizedSelector\n              .replace(/^.*[\\s]/, \"\") // regex 'greedy' selector anchored to string start, searching for whitespace to convert (eg) \".a + .b + .c\" to \".c\". Delete any conditions on hierarchical (adjacent sibling / descendent etc.) selectors because they could match and that's close enough to warrant including it.\n              .replace(/:+.*$/gi, \"\") // regex 'greedy' selector anchored to string end, searching for \":\" and deleting everything after\n              .trim();\n\n            // END OF NORMALISATION\n\n            // Restore escaped colons back to \"\\:\".\n            // See above comment about escaped colons.\n            normalizedSelector = normalizedSelector.replace(\n              new RegExp(unique, \"g\"),\n              \"\\\\:\"\n            );\n\n            const isMatch = el.matches(normalizedSelector);\n\n            if (isMatch) {\n              const existingCSSSniffStyleRule = cssSniffStyleSheet[i];\n              if (\n                existingCSSSniffStyleRule &&\n                existingCSSSniffStyleRule.type !== \"CSSSniffStyleRule\"\n              ) {\n                throw Error(\"Rule can't change type\");\n              }\n              const cssSniffStyleRule: CSSSniffStyleRule = {\n                type: \"CSSSniffStyleRule\",\n                selectors: existingCSSSniffStyleRule\n                  ? existingCSSSniffStyleRule.selectors\n                  : [],\n                properties: cssStyleRule.cssText.substring(\n                  cssStyleRule.cssText.indexOf(\"{\") + 1,\n                  cssStyleRule.cssText.lastIndexOf(\"}\")\n                ),\n              };\n              if (!cssSniffStyleRule.selectors.includes(selector)) {\n                cssSniffStyleRule.selectors.push(selector);\n              }\n              cssSniffStyleSheet[i] = cssSniffStyleRule;\n            }\n          } catch (e) {\n            const isCharsetError =\n              \"@charset\".indexOf(cssStyleRule.selectorText) !== -1;\n            if (!isCharsetError) {\n              console.error(\n                \"ERROR\",\n                cssStyleRule.type,\n                `[${trimmedSelector}]`,\n                `[[${normalizedSelector}]]`,\n                `(((${cssStyleRule.selectorText})))`,\n                e\n              );\n            }\n          }\n        });\n      }\n    } else if (\n      // @ts-ignore\n      rule.media\n    ) {\n      // @ts-ignore\n      const cssMediaRule: CSSMediaRule = rule;\n      const conditionText = cssMediaRule.conditionText || cssMediaRule.media[0];\n      if (mediaIsAllowed(conditionText, options)) {\n        // a nested rule like @media { rule { ... } }\n        // so we filter the rules inside individually\n        const cssRulesArray = Array.from(cssMediaRule.cssRules);\n\n        const existingMediaRule = cssSniffStyleSheet[i];\n        if (\n          existingMediaRule &&\n          existingMediaRule.type !== \"CSSSniffMediaRule\"\n        ) {\n          throw Error(`Can't change type`);\n        }\n\n        const childrenRules: CSSSniffStyleSheet = existingMediaRule\n          ? existingMediaRule.children\n          : {};\n\n        _filterCSSRulesByElement(el, cssRulesArray, options, childrenRules);\n\n        if (Object.keys(childrenRules).length > 0) {\n          cssSniffStyleSheet[i] = {\n            type: \"CSSSniffMediaRule\",\n            before: \"@media \" + conditionText,\n            children: childrenRules,\n          };\n        }\n      }\n    }\n  }\n}\n\nfunction sheetIsAllowed(sheet: StyleSheet, options: Options) {\n  // Returns boolean of whether the sheet is allowed\n  // due to whitelist/blacklist\n  if (!sheet) return false;\n  if (!sheet.ownerNode) return true;\n\n  const checkStylesheet = (sheet: StyleSheet, sheetMatch: string) => {\n    switch (sheet.ownerNode.nodeName.toLowerCase()) {\n      case \"style\":\n      case \"link\":\n        // @ts-ignore\n        const el: HTMLElement = sheet.ownerNode;\n        // matching on JSON.stringify(node.attrs)\n        const nodeAttrs = el.attributes;\n        const attrs: Record<string, string> = {};\n        for (let i = 0; i < nodeAttrs.length; i++) {\n          const name = nodeAttrs[i].name;\n          attrs[name] = nodeAttrs[i].value;\n        }\n        const attributesJSON = JSON.stringify(attrs);\n        return attributesJSON.indexOf(sheetMatch) !== -1;\n    }\n    throw new Error(\n      `CSS Sniff: Unknown sheet nodeName of ${\n        sheet.ownerNode && sheet.ownerNode.nodeName\n      } `\n    );\n  };\n\n  let whitelisted = true;\n  let blacklisted = false;\n\n  const whitelistStylesheets =\n    options.whitelist && options.whitelist.stylesheet;\n  if (whitelistStylesheets) {\n    const sheetMatches = Array.isArray(whitelistStylesheets)\n      ? Array.from(whitelistStylesheets)\n      : [whitelistStylesheets];\n    whitelisted = sheetMatches.some((sheetMatch) =>\n      checkStylesheet(sheet, sheetMatch)\n    );\n  }\n\n  const blacklistStylesheets =\n    options.blacklist && options.blacklist.stylesheet;\n  if (blacklistStylesheets) {\n    const sheetMatches = Array.isArray(blacklistStylesheets)\n      ? blacklistStylesheets\n      : [blacklistStylesheets];\n    blacklisted = sheetMatches.some((sheetMatch) =>\n      checkStylesheet(sheet, sheetMatch)\n    );\n  }\n\n  return whitelisted !== false && blacklisted !== true;\n}\n\nfunction mediaIsAllowed(mediaString: string, options: Options) {\n  if (!options || !mediaString) return false;\n\n  let whitelisted = true;\n  let blacklisted = false;\n\n  const whitelistMedia = options.whitelist && options.whitelist.media;\n  if (whitelistMedia) {\n    const mediaMatches = Array.isArray(whitelistMedia)\n      ? whitelistMedia\n      : [whitelistMedia];\n    whitelisted = mediaMatches.some(\n      (mediaMatch) => mediaString.indexOf(mediaMatch) !== -1\n    );\n  }\n\n  const blacklistMedia = options.blacklist && options.blacklist.media;\n  if (blacklistMedia) {\n    const mediaMatches = Array.isArray(blacklistMedia)\n      ? blacklistMedia\n      : [blacklistMedia];\n    blacklisted = mediaMatches.some(\n      (mediaMatch) => mediaString.indexOf(mediaMatch) !== -1\n    );\n  }\n\n  return whitelisted !== false && blacklisted !== true;\n}\n\nfunction ruleIsAllowed(ruleString: string, options: Options) {\n  if (!options || !ruleString) return false;\n\n  let whitelisted = true;\n  let blacklisted = false;\n\n  const whitelistRules = options.whitelist && options.whitelist?.rule;\n  if (whitelistRules) {\n    const ruleMatches = Array.isArray(whitelistRules)\n      ? whitelistRules\n      : [whitelistRules];\n    whitelisted = ruleMatches.some(\n      (ruleMatch) => ruleString.indexOf(ruleMatch) !== -1\n    );\n  }\n\n  const blacklistRules = options.blacklist && options.blacklist.rule;\n  if (blacklistRules) {\n    const ruleMatches = Array.isArray(blacklistRules)\n      ? blacklistRules\n      : [blacklistRules];\n    blacklisted = ruleMatches.some(\n      (ruleMatch) => ruleString.indexOf(ruleMatch) !== -1\n    );\n  }\n\n  return whitelisted !== false && blacklisted !== true;\n}\n\nexport function mergeMatches(matchedCSSArray: CSSSniffRoot[]): CSSSniffRoot {\n  // Via https://stackoverflow.com/a/34749873\n  const isObject = (item: any): boolean => {\n    return item && typeof item === \"object\" && !Array.isArray(item);\n  };\n\n  // @ts-ignore\n  type NestedObject = Record<string, NestedObject>;\n\n  const mergeDeep = (\n    target: NestedObject,\n    ...sources: NestedObject[]\n  ): NestedObject => {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n      for (const key in source) {\n        if (isObject(source[key])) {\n          if (!target[key]) {\n            target[key] = {};\n          }\n          const matchedCSS = target[key];\n          if (!matchedCSS) {\n            throw Error(\"Expected to be able to create key\");\n          }\n          mergeDeep(matchedCSS, source[key]);\n        } else {\n          Object.assign(target, { [key]: source[key] });\n        }\n      }\n    }\n    return mergeDeep(target, ...sources);\n  };\n  return mergeDeep({}, ...matchedCSSArray);\n}\n\nexport function serializeCSSMatches(matchedCSS: CSSSniffRoot): string {\n  let css = \"\";\n\n  Object.keys(matchedCSS).forEach((sheetIndex: string) => {\n    const sheet = matchedCSS[sheetIndex];\n\n    Object.keys(sheet).forEach((ruleIndex: string) => {\n      const rule = sheet[ruleIndex];\n      if (rule.type === \"CSSSniffStyleRule\") {\n        css += rule.selectors.join(\",\");\n        css += \"{\";\n        css += rule.properties;\n        css += \"}\";\n      } else if (rule.type === \"CSSSniffMediaRule\") {\n        css += rule.before;\n        css += \"{\";\n        Object.keys(rule.children).forEach((childRuleIndex: string) => {\n          const childRule = rule.children[childRuleIndex];\n          if (childRule.type === \"CSSSniffStyleRule\") {\n            css += childRule.selectors.join(\",\");\n            css += \"{\";\n            css += childRule.properties;\n            css += \"}\";\n          } else {\n            throw Error(\"Can't serialize invalid CSS structure\");\n          }\n        });\n        css += \"}\";\n      }\n    });\n  });\n\n  return css;\n}\n\nexport function serializeCSSMatchesAsProperties(\n  matchedCSS: CSSSniffRoot\n): string {\n  return Object.values(matchedCSS)\n    .map((sheet): string => {\n      return Object.values(sheet)\n        .map((rule): string => {\n          if (rule.type === \"CSSSniffStyleRule\") {\n            return rule.properties;\n          } else if (rule.type === \"CSSSniffMediaRule\") {\n            return `${rule.before}{${Object.values(rule.children)\n              .map((childRule): string => {\n                if (childRule.type === \"CSSSniffStyleRule\") {\n                  return childRule.properties;\n                }\n                throw Error(\"Invalid structure\");\n              })\n              .join(\"\")}}`;\n          }\n          throw Error(`Unknown type.`);\n        })\n        .join(\"\");\n    })\n    .join(\";\")\n    .trim();\n}\n\nexport function cssRootDiff(a: CSSSniffRoot, b: CSSSniffRoot): CSSSniffRoot {\n  const diff: CSSSniffRoot = {};\n\n  Object.keys(b).forEach((bSheetIndex) => {\n    const bSheet = b[bSheetIndex];\n    Object.keys(bSheet).forEach((bRuleIndex) => {\n      const bRule = bSheet[bRuleIndex];\n      let diffStyleSheet: CSSSniffStyleSheet = diff[bSheetIndex] || {};\n      if (bRule.type === \"CSSSniffStyleRule\") {\n        if (!a[bSheetIndex] || !a[bSheetIndex][bRuleIndex]) {\n          diffStyleSheet[bRuleIndex] = bRule;\n          diff[bSheetIndex] = diffStyleSheet;\n        }\n      } else if (bRule.type === \"CSSSniffMediaRule\") {\n        const diffRule = diff[bSheetIndex] && diff[bSheetIndex][bRuleIndex];\n        if (diffRule && diffRule.type !== \"CSSSniffMediaRule\") {\n          throw Error(`Cannot change type of diff`);\n        }\n        const aRule = a[bSheetIndex] && a[bSheetIndex][bRuleIndex];\n        if (aRule && aRule.type !== \"CSSSniffMediaRule\") {\n          throw Error(`Cannot change type of (a)`);\n        }\n        const diffChildren = diffRule.children || {};\n        Object.keys(bRule.children).forEach((bRuleChildIndex) => {\n          if (!aRule || !aRule.children[bRuleChildIndex]) {\n            diffChildren[bRuleChildIndex] = bRule.children[bRuleChildIndex];\n          }\n        });\n        if (Object.keys(diffChildren).length > 0) {\n          diffStyleSheet[bRuleIndex] = {\n            ...bRule,\n            children: diffChildren,\n          };\n          diff[bSheetIndex] = diffStyleSheet;\n        }\n      }\n    });\n  });\n\n  return diff;\n}\n\nexport function splitSelectors(selectors: string): string[] {\n  /*\n    split-css-selector by Joakim Carlstein (C) 2015 for\n    function 'splitSelectors'. Licenced under MIT\n  */\n  function isAtRule(selector: string): boolean {\n    return selector.indexOf(\"@\") === 0;\n  }\n\n  if (isAtRule(selectors)) {\n    return [selectors];\n  }\n\n  var splitted = [];\n  var parens = 0;\n  var angulars = 0;\n  var soFar = \"\";\n  for (var i = 0, len = selectors.length; i < len; i++) {\n    var char = selectors[i];\n    if (char === \"(\") {\n      parens += 1;\n    } else if (char === \")\") {\n      parens -= 1;\n    } else if (char === \"[\") {\n      angulars += 1;\n    } else if (char === \"]\") {\n      angulars -= 1;\n    } else if (char === \",\") {\n      if (!parens && !angulars) {\n        splitted.push(soFar.trim());\n        soFar = \"\";\n        continue;\n      }\n    }\n    soFar += char;\n  }\n  splitted.push(soFar.trim());\n  return splitted;\n}\n\nconst unique = `css-sniff-placeholder`;\n","import { Log } from \"../log\";\nimport {\n  MetaHTMLIfSuccessInternal,\n  MetaHTMLIfFailureInternal,\n} from \"./metaComponent\";\nimport { parseExpression } from \"@babel/parser\";\nimport generate from \"@babel/generator\";\n\ntype Props = {\n  htmlElement: HTMLElement;\n  log: Log;\n};\n\nexport const parseMetaHTMLIf = ({\n  htmlElement,\n  log,\n}: Props):\n  | Omit<MetaHTMLIfSuccessInternal, \"children\">\n  | Omit<MetaHTMLIfFailureInternal, \"children\"> => {\n  const optional = !!htmlElement.hasAttribute(\"optional\");\n  const test =\n    htmlElement.getAttribute(\"test\") || htmlElement.getAttribute(\"key\"); // 'key' is legacy from MetaComponent v1\n  if (!test) {\n    log(\n      `Expected to find 'test' (or 'key' for legacy support) attribute on mt-if`\n    );\n  }\n\n  try {\n    let testAsJavaScriptExpression = \"\";\n    let testAsPythonExpression = \"\";\n    let testAsPHPExpression = \"\";\n    let ids: string[] = [];\n    if (test) {\n      const AST = parseExpression(test);\n      if (![\"BinaryExpression\", \"Identifier\"].includes(AST.type)) {\n        throw Error(\n          `<mt-if test=\"${test}\"> expression must only include JavaScript expressions that are either (1) a variable, or (2) a variable comparison to a string \" myVar === 'value' \" or \" myVar !== 'value' \".`\n        );\n      }\n      ids = findIdentifiers(AST);\n      switch (AST.type) {\n        case \"BinaryExpression\": {\n          testAsJavaScriptExpression = generate(AST).code;\n          testAsPythonExpression = `${toPython(AST.left)} ${to2CharOperator(\n            AST.operator\n          )} ${toPython(AST.right)}`;\n          testAsPHPExpression = `${toPHP(AST.left)} ${to2CharOperator(\n            AST.operator\n          )} ${toPHP(AST.right)}`;\n          break;\n        }\n        case \"Identifier\": {\n          testAsJavaScriptExpression = generate(AST).code;\n          testAsPythonExpression = AST.name;\n          testAsPHPExpression = `$${AST.name}`;\n          break;\n        }\n      }\n    }\n\n    return {\n      type: \"If\",\n      ids,\n      testAsJavaScriptExpression,\n      testAsPythonExpression,\n      testAsPHPExpression,\n      optional,\n      parseError: false,\n    };\n  } catch (e) {\n    log(`JS Expression:\\n\\t${test}\\n`, e);\n    return { type: \"If\", optional, parseError: true, error: e.toString() };\n  }\n};\n\nfunction findIdentifiers(AST: ReturnType<typeof parseExpression>): string[] {\n  const ids: string[] = [];\n\n  const walk = (node: any) => {\n    if (node.type === \"Identifier\" && node.name) {\n      ids.push(node.name);\n    } else if (node.identifierName) {\n      ids.push(node.identifierName);\n    }\n    // Object.keys(node).forEach((name) => walk(node[name]));\n  };\n  // @ts-ignore\n  Object.keys(AST).forEach((name) => walk(AST[name]));\n\n  return ids;\n}\n\nfunction toPHP(astNode: ReturnType<typeof parseExpression>): string {\n  switch (astNode.type) {\n    case \"Identifier\":\n      return `$${astNode.name.toString()}`;\n    case \"StringLiteral\": {\n      return JSON.stringify(astNode.value.toString()); // handles escaping similarly to PHP\n    }\n  }\n  throw Error(`Unsupported AST type \"${astNode.type}\"`);\n}\n\nfunction toPython(astNode: ReturnType<typeof parseExpression>): string {\n  switch (astNode.type) {\n    case \"Identifier\":\n      return stringToDjangoVar(astNode.name.toString());\n    case \"StringLiteral\": {\n      return JSON.stringify(astNode.value.toString()); // handles escaping similarly to PHP\n    }\n  }\n  throw Error(`Unsupported AST type \"${astNode.type}\"`);\n}\n\nfunction to2CharOperator(operator: string): string {\n  return operator.replace(/===/gi, \"==\").replace(/!==/gi, \"!=\");\n}\n\nexport function stringToDjangoVar(str: string): string {\n  return str.replace(/[^a-zA-Z_]/g, \"_\");\n}\n","import { MetaNodeInternal } from \"./metaComponent\";\nimport { Log } from \"../log\";\nimport { MetaAttributeVariableOptions } from \"./parseMetaHTMLAttribute\";\n\ntype PropTypeAttributeValue = {\n  type: \"PropTypeAttributeValue\";\n  required: boolean;\n  nodeName: string;\n  attributeName: string;\n};\n\ntype PropTypeAttributeValueOptions = {\n  type: \"PropTypeAttributeValueOptions\";\n  required: boolean;\n  nodeName: string;\n  attributeName: string;\n  options: MetaAttributeVariableOptions[\"options\"];\n};\n\ntype PropTypeVariable = {\n  type: \"PropTypeVariable\";\n  required: boolean;\n};\n\n// These are return props not the props given to this function\nexport type Props = Record<\n  string,\n  PropTypeAttributeValue | PropTypeAttributeValueOptions | PropTypeVariable\n>;\n\nexport function getProps(nodes: MetaNodeInternal[], log: Log): Props {\n  const props: Props = {};\n\n  const walk = (node: MetaNodeInternal) => {\n    switch (node.type) {\n      case \"Element\":\n        {\n          const attributeNames = Object.keys(node.attributes);\n          attributeNames.forEach((attributeName) => {\n            const attributeValueParts = node.attributes[attributeName];\n            attributeValueParts.forEach((attributeValuePart) => {\n              if (attributeValuePart.type === \"MetaAttributeVariable\") {\n                if (!attributeValuePart.id) {\n                  log(\n                    `Ignoring empty prop id. ${JSON.stringify(\n                      attributeValuePart\n                    )} from ${JSON.stringify(node)}`\n                  );\n                  return;\n                }\n                if (\n                  props[attributeValuePart.id] &&\n                  props[attributeValuePart.id].type ===\n                    \"PropTypeAttributeValueOptions\"\n                ) {\n                  return; // don't clobber with a less-specific typing than options\n                }\n                props[attributeValuePart.id] = {\n                  type: \"PropTypeAttributeValue\",\n                  required: attributeValuePart.required,\n                  nodeName: node.nodeName,\n                  attributeName,\n                };\n              } else if (\n                attributeValuePart.type === \"MetaAttributeVariableOptions\"\n              ) {\n                if (!attributeValuePart.id) {\n                  log(\n                    `Ignoring empty prop id. ${JSON.stringify(\n                      attributeValuePart\n                    )} from ${JSON.stringify(node)}`\n                  );\n                  return;\n                }\n                props[attributeValuePart.id] = {\n                  type: \"PropTypeAttributeValueOptions\",\n                  required: attributeValuePart.required,\n                  nodeName: node.nodeName,\n                  attributeName,\n                  options: attributeValuePart.options,\n                };\n              }\n            });\n          });\n          node.children.forEach(walk);\n        }\n        break;\n      case \"If\":\n        if (node.parseError === false) {\n          node.ids.forEach((id) => {\n            if (!id) {\n              log(`Ignoring empty prop id from ${JSON.stringify(node)}`);\n              return;\n            }\n            if (props[id]) return; // don't clobber a more specific typing\n\n            props[id] = {\n              type: \"PropTypeVariable\",\n              required: !node.optional,\n            };\n          });\n        }\n        node.children.forEach(walk);\n        break;\n      case \"Variable\": {\n        if (!node.id) {\n          log(`Ignoring empty prop id from ${JSON.stringify(node)}`);\n          break;\n        }\n        if (props[node.id]) return; // don't clobber a more specific typing\n        props[node.id] = {\n          type: \"PropTypeVariable\",\n          required: !node.optional,\n        };\n        node.children.forEach(walk);\n        break;\n      }\n    }\n  };\n\n  nodes.forEach(walk);\n\n  return props;\n}\n","// All credit to https://stackoverflow.com/a/9337047\nexport const validJavaScriptIdentifer = /^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[$A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc][$A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc0-9\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19b0-\\u19c0\\u19c8\\u19c9\\u19d0-\\u19d9\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1dc0-\\u1de6\\u1dfc-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f]*$/;\n\nexport function assertUnreachable(x?: never): never {\n  throw new Error(\"Didn't expect to get here\");\n}\n","import { parseHTMLWithoutInsertionMode } from \"./parseMetaHTML\";\nimport {\n  parseAttributeValue,\n  MetaAttributeValue,\n  MetaAttributeValues,\n  MetaAttributeValuesInternal,\n} from \"./parseMetaHTMLAttribute\";\nimport { parseMetaVariable } from \"./parseMetaVariable\";\nimport {\n  cssSniff,\n  serializeCSSMatches,\n  serializeCSSMatchesAsProperties,\n  cssRootDiff,\n  CSSSniffRoot,\n} from \"../cssSniff/cssSniff\";\nimport { parseMetaHTMLIf } from \"./parseMetaHTMLIf\";\nimport { getProps, Props } from \"./getProps\";\nimport { Log } from \"../log\";\nimport { assertUnreachable } from \"../makeTemplates/utils\";\n\ntype ParseMetaComponentStringProps = {\n  domDocument: Document;\n  metaHTMLString: string;\n  cssString: string;\n  log: Log;\n};\n\nexport function parseMetaComponentString({\n  domDocument,\n  metaHTMLString,\n  cssString,\n  log,\n}: ParseMetaComponentStringProps): MetaComponent {\n  parseHTMLWithoutInsertionMode({\n    domDocument,\n    metaHTMLString,\n    cssString,\n    log,\n  });\n  // now we have a DOM representing the original MetaHTMLString, so we need to build a MetaHTML\n  const bodyNodes = Array.from(domDocument.body.childNodes);\n  const nodes = bodyNodes.map((node) => nodeToMetaNode({ node, log }));\n  const metaComponent = {\n    cssString: getAllMatchingCSSRulesRecursively(nodes),\n    props: getProps(nodes, log),\n    nodes: internalToPublic(nodes),\n  };\n  return metaComponent;\n}\n\nexport type MetaComponent = {\n  cssString: string;\n  nodes: MetaNode[];\n  props: Props;\n};\n\nexport type MetaNode =\n  | MetaHTMLElement\n  | MetaHTMLText\n  | MetaHTMLComment\n  | MetaHTMLVariable\n  | MetaHTMLIf;\n\nexport type MetaNodeInternal =\n  | MetaHTMLElementInternal\n  | MetaHTMLText\n  | MetaHTMLComment\n  | MetaHTMLVariableInternal\n  | MetaHTMLIfInternal;\n\nexport type MetaHTMLElement = {\n  type: \"Element\";\n  nodeName: string;\n  attributes: Record<string, MetaAttributeValues>;\n  children: MetaNode[];\n  cssProperties: MetaCSSPropertiesNode[];\n};\n\nexport type MetaHTMLElementInternal = Omit<\n  MetaHTMLElement,\n  \"children\" | \"attributes\"\n> & {\n  children: MetaNodeInternal[];\n  attributes: Record<string, MetaAttributeValuesInternal>;\n  node: HTMLElement;\n};\n\nexport type MetaCSSPropertiesNode =\n  | MetaCSSPropertiesConditionalNode\n  | MetaCSSPropertiesConstantNode;\n\nexport type MetaCSSPropertiesConstantNode = {\n  type: \"MetaCSSPropertiesConstantNode\";\n  cssPropertiesString: string;\n};\n\nexport type MetaCSSPropertiesConditionalNode = {\n  type: \"MetaCSSPropertiesConditionalNode\";\n  id: string;\n  condition: {\n    [equalsString: string]: string; // cssProperties as string\n  };\n};\n\nexport type MetaHTMLText = { type: \"Text\"; value: string };\n\nexport type MetaHTMLComment = { type: \"Comment\"; value: string };\n\nexport type MetaHTMLVariable = {\n  type: \"Variable\";\n  id: string;\n  children: MetaNode[];\n};\n\nexport type MetaHTMLVariableInternal = {\n  type: \"Variable\";\n  id: string;\n  optional: boolean;\n  children: MetaNodeInternal[];\n};\n\ntype MetaHTMLIfBase = {\n  type: \"If\";\n  children: MetaNode[];\n};\n\nexport type MetaHTMLIfSuccess = MetaHTMLIfBase & {\n  parseError: false;\n  ids: string[];\n  testAsJavaScriptExpression: string; // a string of codegen'd JS that can be used directly.\n  testAsPythonExpression: string; // a string of codegen'd JS that can be used directly.\n  testAsPHPExpression: string; // a string of codegen'd JS that can be used directly.\n  // Other languages should be added. PRs welcome.\n};\n\nexport type MetaHTMLIfFailure = MetaHTMLIfBase & {\n  parseError: true;\n  error: string;\n};\n\nexport type MetaHTMLIf = MetaHTMLIfSuccess | MetaHTMLIfFailure;\n\nexport type MetaHTMLIfSuccessInternal = Omit<MetaHTMLIfSuccess, \"children\"> & {\n  children: MetaNodeInternal[];\n  optional: boolean;\n};\n\nexport type MetaHTMLIfFailureInternal = Omit<MetaHTMLIfFailure, \"children\"> & {\n  children: MetaNodeInternal[];\n  optional: boolean;\n};\n\nexport type MetaHTMLIfInternal =\n  | MetaHTMLIfSuccessInternal\n  | MetaHTMLIfFailureInternal;\n\ntype NodeToMetaNodeProps = {\n  node: ChildNode;\n  log: Log;\n};\n\nfunction nodeToMetaNode({ node, log }: NodeToMetaNodeProps): MetaNodeInternal {\n  if (node.nodeType === Node.TEXT_NODE) {\n    return { type: \"Text\", value: node.textContent || \"\" };\n  } else if (node.nodeType === Node.COMMENT_NODE) {\n    return { type: \"Comment\", value: node.textContent || \"\" };\n  } else if (node.nodeType !== Node.ELEMENT_NODE) {\n    throw Error(`Unhandled nodeType ${node.nodeType}`);\n  }\n\n  // @ts-ignore\n  const htmlElement: HTMLElement = node;\n  const names = Array.from(htmlElement.getAttributeNames());\n  const nodeName = htmlElement.nodeName.toLowerCase();\n\n  if (nodeName === \"mt-variable\") {\n    return {\n      ...parseMetaVariable({\n        htmlElement,\n        log,\n      }),\n      children: Array.from(node.childNodes).map((childNode) =>\n        nodeToMetaNode({ node: childNode, log })\n      ),\n    };\n  } else if (nodeName === \"mt-if\") {\n    return {\n      ...parseMetaHTMLIf({ htmlElement, log }),\n      children: Array.from(node.childNodes).map((childNode) =>\n        nodeToMetaNode({ node: childNode, log })\n      ),\n    };\n  }\n\n  const attributes = names.reduce(\n    (attributes: MetaHTMLElementInternal[\"attributes\"], name: string) => {\n      const attributeValue = htmlElement.getAttribute(name);\n      if (attributeValue === null) throw Error(`Expected attribute value.`);\n      attributes[name] = parseAttributeValue(attributeValue, log);\n      return attributes;\n    },\n    {} as MetaHTMLElementInternal[\"attributes\"]\n  );\n\n  const cssProperties = getAllMatchingCSSProperties(htmlElement, attributes);\n\n  return {\n    type: \"Element\",\n    nodeName,\n    attributes: attributes,\n    node: htmlElement,\n    children: Array.from(node.childNodes).map((node) =>\n      nodeToMetaNode({ node, log })\n    ),\n    cssProperties,\n  };\n}\n\nfunction getAllMatchingCSSProperties(\n  element: HTMLElement,\n  attributes: MetaHTMLElement[\"attributes\"]\n): MetaCSSPropertiesNode[] {\n  const cssProperties: MetaCSSPropertiesNode[] = [];\n\n  resetElementAttributes(element, attributes);\n\n  const resetMatchedCSS = cssSniff([element], { ignoreChildren: true });\n\n  const cssPropertiesStringConstants = serializeCSSMatchesAsProperties(\n    resetMatchedCSS\n  );\n\n  if (cssPropertiesStringConstants) {\n    cssProperties.push({\n      type: \"MetaCSSPropertiesConstantNode\",\n      cssPropertiesString: cssPropertiesStringConstants,\n    });\n  }\n\n  Object.keys(attributes)\n    .filter(attributesThatCanBeSet)\n    .forEach((attributeName: string) => {\n      const resetValue = element.getAttribute(attributeName);\n      const attributeValues = attributes[attributeName];\n      attributeValues.forEach((attributeValue) => {\n        if (attributeValue.type === \"MetaAttributeVariableOptions\") {\n          const conditionalNode: MetaCSSPropertiesConditionalNode = {\n            type: \"MetaCSSPropertiesConditionalNode\",\n            id: attributeValue.id,\n            condition: {},\n          };\n          Object.entries(attributeValue.options).forEach(\n            ([optionName, optionValue]) => {\n              element.setAttribute(\n                attributeName,\n                `${resetValue ? `${resetValue} ` : \"\"}${optionValue}`\n              );\n              const matchedCSS = cssSniff([element], { ignoreChildren: true });\n              const cssRoot = cssRootDiff(resetMatchedCSS, matchedCSS);\n              const cssPropertiesString = serializeCSSMatchesAsProperties(\n                cssRoot\n              );\n              if (cssPropertiesString) {\n                conditionalNode.condition[optionName] = cssPropertiesString;\n              }\n              if (resetValue) {\n                element.setAttribute(attributeName, resetValue);\n              }\n            }\n          );\n          if (Object.keys(conditionalNode.condition).length > 0) {\n            cssProperties.push(conditionalNode);\n          }\n        }\n      });\n    });\n\n  return cssProperties;\n}\n\nfunction resetElementAttributes(\n  element: HTMLElement,\n  attributes: MetaHTMLElement[\"attributes\"]\n): void {\n  Object.keys(attributes)\n    .filter(attributesThatCanBeSet)\n    .forEach((name: string) => {\n      const attribute = attributes[name];\n      element.setAttribute(\n        name,\n        attribute\n          .map((metaAttribute) => {\n            if (metaAttribute.type === \"MetaAttributeConstant\") {\n              return ` ${metaAttribute.value}`;\n            }\n            // We can't predict what MetaAttributeVariable might be\n            return \"\";\n          })\n          .join(\" \")\n      );\n    });\n}\n\nfunction internalToPublic(nodes: MetaNodeInternal[]): MetaNode[] {\n  // discards the Node variable which shouldn't be exposed to consumers\n  function walk(node: MetaNodeInternal): MetaNode {\n    switch (node.type) {\n      case \"Comment\":\n      case \"Text\":\n        return node;\n      case \"Variable\":\n        return {\n          type: node.type,\n          id: node.id,\n          children: node.children.map(walk),\n        };\n      case \"If\":\n        if (node.parseError) {\n          return {\n            type: node.type,\n            parseError: node.parseError,\n            children: node.children,\n            error: node.error,\n          };\n        } else {\n          return {\n            type: node.type,\n            parseError: node.parseError,\n            ids: node.ids,\n            children: node.children,\n            testAsJavaScriptExpression: node.testAsJavaScriptExpression,\n            testAsPythonExpression: node.testAsPythonExpression,\n            testAsPHPExpression: node.testAsPHPExpression,\n          };\n        }\n      case \"Element\":\n        return {\n          type: node.type,\n          nodeName: node.nodeName,\n          attributes: walkAttributes(node.attributes),\n          cssProperties: node.cssProperties,\n          children: node.children.map(walk),\n        };\n      default:\n        throw Error(`Unrecognised node ${node}. ${JSON.stringify(node)}`);\n    }\n  }\n\n  const walkAttributes = (\n    internalAttributes: MetaHTMLElementInternal[\"attributes\"]\n  ): MetaHTMLElement[\"attributes\"] => {\n    const keys = Object.keys(internalAttributes);\n    return keys.reduce(\n      (\n        attributes: MetaHTMLElement[\"attributes\"],\n        key: string\n      ): MetaHTMLElement[\"attributes\"] => {\n        const values = internalAttributes[key];\n        const newAttributeValues = values.map(\n          (value): MetaAttributeValue => {\n            switch (value.type) {\n              case \"MetaAttributeConstant\": {\n                return value;\n              }\n              case \"MetaAttributeVariable\": {\n                return {\n                  type: value.type,\n                  id: value.id,\n                };\n              }\n              case \"MetaAttributeVariableOptions\": {\n                return {\n                  type: value.type,\n                  id: value.id,\n                  options: value.options,\n                };\n              }\n            }\n            return assertUnreachable(value);\n          }\n        );\n        attributes[key] = newAttributeValues;\n        return attributes;\n      },\n      {} as MetaHTMLElement[\"attributes\"]\n    );\n  };\n\n  return nodes.map(walk);\n}\n\nfunction getAllMatchingCSSRulesRecursively(nodes: MetaNodeInternal[]): string {\n  const matchedCSS: CSSSniffRoot = {};\n\n  function getAllMatchingCSSRules(\n    element: HTMLElement,\n    attributes: MetaHTMLElement[\"attributes\"],\n    matchedCSS: CSSSniffRoot\n  ) {\n    // Set ALL classes on element so we can find matching CSS rules.\n    //\n    // The htmlElement.className value looks like a string of,\n    //   \"thing {{ someId: class1 | class2 }} {{ someId: class3 as name1 | class4 as name2 }} \"\n    // so we want to turn that into a string of,\n    //   \"thing class1 class2 class3 class4\"\n    //\n    // In CSS the :not() could mean that adding other classes invalidates rules but MetaComponent\n    // doesn't support that.\n\n    Object.keys(attributes)\n      .filter(attributesThatCanBeSet)\n      .forEach((name: string) => {\n        const newValue = attributes[name]\n          .map((metaAttribute) => {\n            if (metaAttribute.type === \"MetaAttributeConstant\") {\n              return ` ${metaAttribute.value}`;\n            } else if (metaAttribute.type === \"MetaAttributeVariableOptions\") {\n              return ` ${Object.values(metaAttribute.options).join(\" \")}`;\n            }\n            // Else, it's a MetaAttributeVariable.\n            // We can't predict what value MetaAttributeVariable would have so we can't\n            // support detecting CSS based on that\n            return \"\";\n          })\n          .join(\" \");\n\n        element.setAttribute(name, newValue);\n      });\n\n    cssSniff([element], { ignoreChildren: true }, matchedCSS);\n  }\n\n  function walk(node: MetaNodeInternal): void {\n    switch (node.type) {\n      case \"Element\":\n        getAllMatchingCSSRules(node.node, node.attributes, matchedCSS);\n        node.children.forEach(walk);\n        break;\n      case \"If\":\n      case \"Variable\":\n        node.children.forEach(walk);\n        break;\n    }\n  }\n\n  nodes.forEach(walk);\n\n  return serializeCSSMatches(matchedCSS);\n}\n\nfunction attributesThatCanBeSet(attr: string): boolean {\n  // used to filter setting attributes on the real DOM\n  // we don't really care about any other attributes\n  return [\"class\"].includes(attr);\n}\n","import { MetaHTMLVariableInternal } from \"./metaComponent\";\nimport { Log } from \"../log\";\n\ntype Props = {\n  htmlElement: HTMLElement;\n  log: Log;\n};\n\nexport const parseMetaVariable = ({\n  htmlElement,\n  log,\n}: Props): MetaHTMLVariableInternal => {\n  let id = htmlElement.getAttribute(\"id\") || htmlElement.getAttribute(\"key\"); // 'key' is legacy from MetaComponent v1\n  if (!id) {\n    log(\n      `Expected to find 'id' (or 'key' for legacy support) attribute on mt-variable`\n    );\n    return { type: \"Variable\", id: \"\", optional: false, children: [] };\n  }\n  const optional = htmlElement.hasAttribute(\"optional\") || id.includes(\"?\"); // inline '?' is legacy from MetaComponent v1;\n  id = id.replace(/\\?/, \"\");\n  return { type: \"Variable\", id, optional, children: [] };\n};\n","import {\n  MetaHTMLElement,\n  MetaHTMLText,\n  MetaHTMLComment,\n  MetaHTMLIf,\n  MetaHTMLVariable,\n  MetaNode,\n} from \"../metaComponent/metaComponent\";\nimport { TemplateFiles } from \"../types\";\nimport { Props } from \"../metaComponent/getProps\";\n\nexport interface TemplateFormat {\n  dirname: string;\n  templateId: string;\n\n  onElement: (element: MetaHTMLElement) => string;\n  onText: (text: MetaHTMLText) => void;\n  onComment: (text: MetaHTMLComment) => void;\n  onCloseElement: (closeElement: OnCloseElement) => void;\n  onVariable: (onVariable: MetaHTMLVariable) => void;\n  onCloseVariable: (closeVariable: MetaHTMLVariable) => void;\n  onIf: (onIf: MetaHTMLIf) => void;\n  onCloseIf: (onCloseIf: MetaHTMLIf) => void;\n  onFinalise: (args: OnFinalise) => void;\n  serialize: () => TemplateFiles;\n}\n\nexport type OnConstructor = {\n  templateId: string;\n  dirname?: string;\n  props: Props;\n  hasMultipleRootNodes: boolean;\n};\n\ntype OnCloseElement = {\n  children: MetaNode[];\n  openingElement: string;\n};\n\ntype OnFinalise = {\n  css: string;\n};\n\nexport class Template {\n  dirname: string;\n  templateId: string;\n  props: Props;\n  hasMultipleRootNodes: boolean;\n\n  constructor(args: OnConstructor) {\n    const { templateId, dirname, props, hasMultipleRootNodes } = args;\n    this.dirname = dirname || \"\";\n    this.templateId = templateId;\n    this.props = props;\n    this.hasMultipleRootNodes = hasMultipleRootNodes;\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    throw Error(\"Not implemented\");\n  }\n\n  onCloseElement(args: Parameters<TemplateFormat[\"onCloseElement\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onVariable(onVariable: Parameters<TemplateFormat[\"onVariable\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onCloseVariable(\n    onCloseVariable: Parameters<TemplateFormat[\"onCloseVariable\"]>[0]\n  ): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onCloseIf(onCloseIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  onFinalise(onFinalise: Parameters<TemplateFormat[\"onFinalise\"]>[0]): void {\n    throw Error(\"Not implemented\");\n  }\n\n  serialize(): TemplateFiles {\n    throw Error(\"Not implemented\");\n  }\n}\n","import prettier from \"prettier/standalone\";\nimport parserPostCSS from \"prettier/parser-postcss\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\n\nexport class CSSTemplate extends Template {\n  css: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"css\" });\n\n    this.css = \"\";\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    return onElement.nodeName;\n  }\n\n  onCloseElement(args: Parameters<TemplateFormat[\"onCloseElement\"]>[0]): void {\n    // pass\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    // pass\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    // pass\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    // pass\n  }\n\n  onCloseVariable(closeVariable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    // pass\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    // pass\n  }\n\n  onCloseIf() {\n    // pass\n  }\n\n  onFinalise(onFinalise: Parameters<TemplateFormat[\"onFinalise\"]>[0]) {\n    const { css } = onFinalise;\n\n    this.css = css;\n    try {\n      this.css = prettier.format(this.css, {\n        parser: \"scss\",\n        printWidth: 80,\n        plugins: [parserPostCSS],\n      });\n    } catch (e) {\n      // pass\n    }\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.css`]: this.css,\n    };\n  }\n}\n","import prettier from \"prettier/standalone\";\nimport parserHTML from \"prettier/parser-html\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\n\nexport class HTMLTemplate extends Template {\n  html: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"html\" });\n    this.html = \"\";\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n\n    this.html += `<${nodeName}`;\n    Object.keys(attributes).forEach((name) => {\n      const attributeValues = attributes[name];\n      this.html += ` ${name}=\"${attributeValues\n        .map((attributeValue) => {\n          if (attributeValue.type === \"MetaAttributeConstant\") {\n            return attributeValue.value;\n          } else if (attributeValue.type === \"MetaAttributeVariableOptions\") {\n            const optionKeys = Object.keys(attributeValue.options);\n            if (optionKeys.length > 0) {\n              const firstKey = optionKeys[0];\n              const firstValue = attributeValue.options[firstKey];\n              return firstValue;\n            }\n            return \"\";\n          }\n          return \"\";\n        })\n        .filter((value) => value.length > 0)\n        .join(\"\")}\"`;\n    });\n    this.html += \">\";\n    return nodeName;\n  }\n\n  onCloseElement(\n    onCloseElement: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ) {\n    const { openingElement } = onCloseElement;\n    this.html += `</${openingElement}>`;\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    const { value } = onText;\n    this.html += value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    const { value } = onComment;\n    this.html += `<!--${value}-->`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    this.html += `<!-- '${variable.id}' goes here -->`;\n  }\n\n  onCloseVariable(closeVariable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    // pass\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    // pass\n  }\n\n  onCloseIf(onIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]) {\n    // pass\n  }\n\n  onFinalise(onFinalise: Parameters<TemplateFormat[\"onFinalise\"]>[0]) {\n    try {\n      this.html = prettier.format(this.html, {\n        parser: \"html\",\n        printWidth: 80,\n        plugins: [parserHTML],\n      });\n    } catch (e) {\n      // pass\n    }\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.html`]: this.html,\n    };\n  }\n}\n\n// Via http://xahlee.info/js/html5_non-closing_tag.html\nexport const SELF_CLOSING_HTML_ELEMENTS = [\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"link\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\",\n];\n","import capitalize from \"lodash/capitalize\";\n\nconst transform: Record<string, string> = {\n  class: \"className\",\n  for: \"htmlFor\",\n  autocomplete: \"autoComplete\",\n  \"fill-rule\": \"fillRule\",\n  readonly: \"readOnly\",\n  autofocus: \"autoFocus\",\n  srcset: \"srcSet\",\n  crossorigin: \"crossOrigin\",\n  spellcheck: \"spellCheck\",\n  tabindex: \"tabIndex\",\n  maxlength: \"maxLength\",\n  // TODO: expand this list... presumably there's an NPM package with these mappings?\n};\n\nexport function attributeNameTransform(attributeName: string): string {\n  // React uses JavaScript names not HTML names which can be different\n  // such as className=\"\" vs class=\"\" and htmlFor=\"\" vs for=\"\" and so on\n  // so we need to convert them...\n  return transform[attributeName] ? transform[attributeName] : attributeName;\n}\n\nexport function getTypeScriptElementName(tagName: string): string {\n  switch (tagName) {\n    case \"p\":\n    case \"h1\":\n    case \"h2\":\n    case \"h3\":\n    case \"h4\":\n    case \"h5\":\n    case \"h6\":\n      return \"\";\n    case \"a\": {\n      return \"Anchor\";\n    }\n    case \"img\": {\n      return \"Image\";\n    }\n    case \"textarea\": {\n      return \"TextArea\";\n    }\n    default: {\n      return capitalize(tagName);\n    }\n  }\n}\n","import prettier from \"prettier/standalone\";\nimport parserTypeScript from \"prettier/parser-typescript\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\nimport { attributeNameTransform, getTypeScriptElementName } from \"./React.util\";\nimport {\n  MetaAttributeValues,\n  MetaAttributeValue,\n} from \"../../metaComponent/parseMetaHTMLAttribute\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\nexport class ReactTemplate extends Template {\n  imports: string;\n  renderPrefix: string;\n  render: string;\n  renderSuffix: string;\n  typeScript: string;\n  constants: string;\n  fileData: string;\n  fragmentStrings: FragmentStrings;\n\n  constructor(args: OnConstructor & ReactExtensions) {\n    super({ ...args, dirname: args.dirname || \"react\" });\n    this.imports = \"\";\n    this.renderPrefix = \"\";\n    this.render = \"\";\n    this.renderSuffix = \"\";\n    this.typeScript = \"\";\n    this.fileData = \"\";\n    this.constants = \"\";\n    this.fragmentStrings = args.fragmentStrings || {\n      start: \"<React.Fragment>\",\n      end: \"</React.Fragment>\",\n    };\n\n    this.setTypeScript = this.setTypeScript.bind(this);\n    this.renderPropType = this.renderPropType.bind(this);\n\n    this.setImports();\n    this.setTypeScript();\n    this.renderRenderFunction();\n  }\n\n  setImports() {\n    this.imports += `import React from 'react';\\n`;\n  }\n\n  setTypeScript() {\n    const props = Object.keys(this.props).map(this.renderPropType).join(\"\\n  \");\n    this.typeScript = `type Props = {\\n  ${props}\\n};`;\n  }\n\n  renderPropType(propId: string): string {\n    const prop = this.props[propId];\n    let propString = \"\";\n\n    propString += validJavaScriptIdentifer.test(propId)\n      ? propId\n      : `\"${propId}\"`;\n\n    if (!prop.required) {\n      propString += \"?\";\n    }\n\n    propString += \": \";\n\n    switch (prop.type) {\n      case \"PropTypeVariable\": {\n        propString += \"React.ReactNode;\";\n        break;\n      }\n      case \"PropTypeAttributeValue\": {\n        propString += `React.${getTypeScriptElementName(\n          prop.nodeName\n        )}HTMLAttributes<HTML${getTypeScriptElementName(\n          prop.nodeName\n        )}Element>[\"${attributeNameTransform(prop.attributeName)}\"];`;\n        break;\n      }\n      case \"PropTypeAttributeValueOptions\": {\n        propString += `${Object.keys(prop.options)\n          .map((key) => {\n            return validJavaScriptIdentifer.test(key) ? `\"${key}\"` : `\"${key}\"`;\n          })\n          .join(\" | \")};`;\n      }\n    }\n\n    return propString;\n  }\n\n  renderRenderFunction() {\n    const propIds = Object.keys(this.props);\n    const containsInvalidIdentifiers = propIds.some(\n      (propId) => !validJavaScriptIdentifer.test(propId)\n    );\n    if (containsInvalidIdentifiers) {\n      this.renderPrefix += `function ${this.templateId}(props: Props){\\n`;\n      const destructure = propIds\n        .filter((key) => validJavaScriptIdentifer.test(key))\n        .join(\", \");\n      if (destructure) {\n        this.renderPrefix += `  const { ${destructure} } = props;\\n`;\n      }\n    } else {\n      this.renderPrefix += `export default function ${\n        this.templateId\n      }({ ${propIds.join(\", \")} }: Props){\\n`;\n    }\n    this.renderPrefix += `  return (\\n`;\n    if (this.hasMultipleRootNodes) {\n      this.renderPrefix += this.fragmentStrings.start;\n    }\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n    this.render += `<${nodeName}`;\n    Object.keys(attributes).forEach((attributeName) => {\n      this.renderAttribute(attributeName, attributes[attributeName]);\n    });\n    if (onElement.children.length === 0) {\n      this.render += \"/\";\n    }\n    this.render += \">\";\n    return nodeName;\n  }\n\n  renderAttribute(\n    attributeName: string,\n    attributeValues: MetaAttributeValues\n  ): void {\n    // TODO: escape attribute values and keys\n    const reactAttributeName = attributeNameTransform(attributeName);\n    this.render += ` ${reactAttributeName}=`;\n    const containsExpression = attributeValues.some(\n      (attributeValue) => attributeValue.type !== \"MetaAttributeConstant\"\n    );\n    const containsConstant = attributeValues.some(\n      (attributeValue) => attributeValue.type === \"MetaAttributeConstant\"\n    );\n\n    if (containsExpression) {\n      this.render += \"{\";\n    } else {\n      this.render += '\"';\n    }\n\n    if (containsExpression && containsConstant) {\n      this.render += \"`\";\n    }\n\n    attributeValues.forEach((attributeValue) => {\n      if (containsConstant && attributeValue.type !== \"MetaAttributeConstant\") {\n        this.render += \"${\";\n      }\n      this.renderAttributeValue(attributeValue);\n      if (containsConstant && attributeValue.type !== \"MetaAttributeConstant\") {\n        this.render += \" : ''}\";\n      }\n    });\n\n    if (containsExpression && containsConstant) {\n      this.render += \"`\";\n    }\n\n    if (containsExpression) {\n      this.render += \"}\";\n    } else {\n      this.render += '\"';\n    }\n  }\n\n  renderAttributeValue(attributeValue: MetaAttributeValue) {\n    switch (attributeValue.type) {\n      case \"MetaAttributeConstant\": {\n        this.render += attributeValue.value;\n        break;\n      }\n      case \"MetaAttributeVariable\": {\n        this.render += validJavaScriptIdentifer.test(attributeValue.id)\n          ? attributeValue.id\n          : `props[\"${attributeValue.id}\"]`;\n        break;\n      }\n      case \"MetaAttributeVariableOptions\": {\n        const identifier = validJavaScriptIdentifer.test(attributeValue.id)\n          ? attributeValue.id\n          : `props[\"${attributeValue.id}\"]`;\n\n        if (!this.props[attributeValue.id].required) {\n          this.render += `${identifier} ? `;\n        }\n        this.render += JSON.stringify(attributeValue.options);\n        this.render += `[${identifier}]`;\n      }\n    }\n  }\n\n  onCloseElement(\n    onCloseElement: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ): void {\n    const { openingElement, children } = onCloseElement;\n    if (children.length > 0) {\n      // because it was already rendered as a self-closing if it had no children\n      this.render += `\\n</${openingElement}>\\n`;\n    }\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    const { value } = onText;\n    this.render += value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    const { value } = onComment;\n    this.render += `{/*${value}*/}`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    const identifier = validJavaScriptIdentifer.test(variable.id)\n      ? variable.id\n      : `props[\"${variable.id}\"]`;\n    this.render += `{${identifier} !== undefined ? ${identifier} : `;\n    if (variable.children.length === 0) {\n      this.render += `null`;\n    } else if (variable.children.length === 1) {\n      if (variable.children[0].type === \"Text\") {\n        this.render += `\\``;\n      } else {\n        this.render += `(${this.fragmentStrings.start}`;\n      }\n    } else {\n      this.render += `(${this.fragmentStrings.start}`;\n    }\n  }\n\n  onCloseVariable(variable: Parameters<TemplateFormat[\"onCloseVariable\"]>[0]) {\n    if (\n      variable.children.length === 1 &&\n      variable.children[0].type === \"Text\"\n    ) {\n      this.render += `\\``;\n    } else if (variable.children.length > 0) {\n      this.render += `${this.fragmentStrings.end})`;\n    }\n    this.render += `}`;\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    if (onIf.parseError === false) {\n      this.render += `{${onIf.testAsJavaScriptExpression} && (${this.fragmentStrings.start}`;\n    } else {\n      this.render += `{false && (${this.fragmentStrings.start}`;\n    }\n  }\n\n  onCloseIf(onCloseIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]) {\n    this.render += `${this.fragmentStrings.end})}`;\n  }\n\n  onFinalise(\n    onSerialize: Parameters<TemplateFormat[\"onFinalise\"]>[0]\n  ): TemplateFiles | undefined {\n    if (this.hasMultipleRootNodes) {\n      this.renderSuffix += this.fragmentStrings.end;\n    }\n\n    const renderFunction = `${this.renderPrefix}${this.render}${this.renderSuffix})\\n};`;\n\n    this.fileData = `${this.imports}\\n${this.typeScript}\\n\\n${this.constants}\\n\\nexport default ${renderFunction}\\n`;\n\n    try {\n      this.fileData = prettier.format(this.fileData, {\n        parser: \"typescript\",\n        printWidth: 80,\n        plugins: [parserTypeScript],\n      });\n    } catch (e) {\n      // pass\n    }\n\n    return {\n      renderFunction,\n      render: this.render,\n      typeScript: this.typeScript,\n      constants: this.constants,\n    };\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.tsx`]: this.fileData,\n    };\n  }\n}\n\nexport type FragmentStrings = {\n  start: string;\n  end: string;\n};\n\nexport type ReactExtensions = {\n  fragmentStrings?: FragmentStrings;\n};\n","import uniq from \"lodash/uniq\";\nimport { ReactTemplate } from \"../React/React\";\nimport { TemplateFormat, OnConstructor } from \"../Template\";\nimport { MetaCSSPropertiesNode } from \"../../metaComponent/metaComponent\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\nexport class ReactStyledComponentsTemplate extends ReactTemplate {\n  styledConstants: string[];\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"react-styled-components\" });\n\n    this.imports += `import styled from 'styled-components';\\n`;\n\n    this.styledConstants = [];\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    let counter = 1;\n    let styledName = onElement.nodeName;\n    if (onElement.cssProperties.length) {\n      do {\n        styledName = `Styled${onElement.nodeName\n          .substring(0, 1)\n          .toUpperCase()}${onElement.nodeName.substring(1)}${\n          counter === 1 ? \"\" : `_${counter}`\n        }`;\n        counter++;\n      } while (this.styledConstants.includes(styledName));\n      this.styledConstants.push(styledName);\n\n      const pickedProps = this.renderCSSPropertyProps(onElement.cssProperties);\n      const styledProps = `${styledName}Props`;\n\n      if (pickedProps) {\n        this.constants += `type ${styledProps} = ${pickedProps};\\n`;\n      }\n      this.constants += `const ${styledName} = styled.${onElement.nodeName}${\n        pickedProps ? `<${styledProps}>` : \"\"\n      }\\`\\n  ${onElement.cssProperties\n        .map((cssProperty) => this.renderCSSProperty(cssProperty, styledProps))\n        .join(\"\\n  \")}\\n\\`;\\n\\n`;\n    }\n    const styledAttributes = {\n      ...onElement.attributes,\n    };\n    delete styledAttributes[\"class\"];\n    onElement.cssProperties.forEach((cssProperty) => {\n      if (cssProperty.type === \"MetaCSSPropertiesConstantNode\") return;\n      styledAttributes[cssProperty.id] = [\n        {\n          type: \"MetaAttributeVariable\",\n          id: cssProperty.id,\n        },\n      ];\n    });\n\n    super.onElement({\n      ...onElement,\n      nodeName: styledName,\n      attributes: styledAttributes,\n    });\n\n    return styledName;\n  }\n\n  renderCSSProperty(\n    cssPropertiesNode: MetaCSSPropertiesNode,\n    styledProps: string\n  ): string {\n    switch (cssPropertiesNode.type) {\n      case \"MetaCSSPropertiesConstantNode\": {\n        return cssPropertiesNode.cssPropertiesString;\n      }\n      case \"MetaCSSPropertiesConditionalNode\": {\n        const isValidIdentifier = validJavaScriptIdentifer.test(\n          cssPropertiesNode.id\n        );\n        let conditional = \"${\";\n        const identifier = isValidIdentifier\n          ? cssPropertiesNode.id\n          : `props[\"${cssPropertiesNode.id}\"]`;\n\n        if (isValidIdentifier) {\n          conditional += `({${cssPropertiesNode.id}}: ${styledProps}) => (`;\n        } else {\n          conditional += `(props: ${styledProps}) => (`;\n        }\n\n        conditional += JSON.stringify(cssPropertiesNode.condition);\n        conditional += `[`;\n        conditional += identifier;\n        conditional += `])}`;\n\n        return conditional;\n      }\n    }\n  }\n\n  renderCSSPropertyProps(\n    cssProperties: MetaCSSPropertiesNode[]\n  ): string | undefined {\n    const propUnion = uniq(\n      cssProperties\n        .map((cssProperty): string => {\n          if (cssProperty.type === \"MetaCSSPropertiesConditionalNode\") {\n            return `\"${cssProperty.id}\"`;\n          }\n          return \"\";\n        })\n        .filter((val: string): boolean => !!val)\n    ).join(\" | \");\n\n    if (propUnion.length === 0) return undefined;\n    return `Pick<Props, ${propUnion}>`;\n  }\n}\n","import { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\nimport { MetaAttributeValues } from \"../../metaComponent/parseMetaHTMLAttribute\";\nimport { assertUnreachable } from \"../utils\";\n\nexport class MustacheTemplate extends Template {\n  data: string;\n  unescapedVariables: string[];\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"mustache\" });\n    this.data = \"\";\n    this.unescapedVariables = [];\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n\n    this.data += `<${nodeName}`;\n    Object.keys(attributes).forEach((name) => {\n      const attributeValues = attributes[name];\n      this.data += this.renderAttribute(name, attributeValues);\n    });\n    this.data += \">\";\n    return nodeName;\n  }\n\n  renderAttribute(name: string, attributeValues: MetaAttributeValues): string {\n    let attr = \" \";\n\n    const isOmittedIfEmpty =\n      attributeValues.length === 1 &&\n      [\"MetaAttributeVariable\"].includes(attributeValues[0].type);\n\n    if (isOmittedIfEmpty) {\n      const attributeVariable = attributeValues[0];\n      if (attributeVariable.type !== \"MetaAttributeVariable\") {\n        throw Error(`Internal error`);\n      }\n      attr += `{{#${attributeVariable.id}}}`;\n    }\n\n    attr += name;\n\n    if (attributeValues) {\n      attr += '=\"';\n      attr += attributeValues\n        .map((attributeValue): string => {\n          switch (attributeValue.type) {\n            case \"MetaAttributeConstant\": {\n              return attributeValue.value;\n            }\n            case \"MetaAttributeVariable\": {\n              return `{{${attributeValue.id}}}`;\n            }\n            case \"MetaAttributeVariableOptions\": {\n              // Because Mustache is \"logic-less\" we can't have\n              // if (x === 1) { result1 } else if (x === 2) { result2 } endif;\n              // we can only have truthy results, so we instead we use the fact\n              // that the \"=\" character is a valid part of a variable name and\n              // we make variables for each possible enumeration. So when\n              // comparing a variable of \"x\" for a value of \"1\" we instead check\n              // for a variable named \"x=1\" literally. So now the code looks like,\n              // if (x=1) { result1 } endif; if(x=2) { result2 } endif;\n              return Object.entries(attributeValue.options)\n                .map(([optionName, optionValue]) => {\n                  return `{{${attributeValue.id}=${optionName}}}${optionValue}{{/${attributeValue.id}=${optionName}}}`;\n                })\n                .join(\"\");\n            }\n          }\n          return assertUnreachable();\n        })\n        .join(\"\")\n        .trim();\n\n      attr += '\"';\n    }\n\n    if (isOmittedIfEmpty) {\n      const attributeVariable = attributeValues[0];\n      if (attributeVariable.type !== \"MetaAttributeVariable\") {\n        throw Error(`Internal error`);\n      }\n      attr += `{{/${attributeVariable.id}}}`;\n    }\n\n    return attr;\n  }\n\n  onCloseElement(args: Parameters<TemplateFormat[\"onCloseElement\"]>[0]): void {\n    this.data += `</${args.openingElement}>`;\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    this.data += onText.value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    this.data += `{{! ${onComment.value} }}`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    this.unescapedVariables.push(variable.id);\n    this.data += `{{{${variable.id}}}}`;\n    if (variable.children.length > 0) {\n      this.data += `{{^${variable.id}}}`;\n    }\n  }\n\n  onCloseVariable(closeVariable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    if (closeVariable.children.length > 0) {\n      this.data += `{{/${closeVariable.id}}}`;\n    }\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    if (onIf.parseError === false) {\n      this.data += `{{#${this.renderIf(onIf.testAsJavaScriptExpression)}}}`;\n    }\n  }\n\n  renderIf(expression: string): string {\n    return expression.replace(/[\\s\"']/gi, \"\").replace(/[=]+/g, \"=\");\n  }\n\n  onCloseIf(onCloseIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]) {\n    if (onCloseIf.parseError === false) {\n      this.data += `{{/${this.renderIf(\n        onCloseIf.testAsJavaScriptExpression\n      )}}}`;\n    }\n  }\n\n  onFinalise(onSerialize: Parameters<TemplateFormat[\"onFinalise\"]>[0]) {\n    let unescaped = \"\";\n    if (this.unescapedVariables.length) {\n      unescaped = `{{!\\nDEVELOPER NOTE: This template uses triple-bracket \"{{{\" which disables HTML escaping.\\nPlease ensure these variables are properly escaped:\\n\\n  * ${this.unescapedVariables.join(\n        \",\\n  * \"\n      )}.\\n\\nThe reason for this is to allow raw HTML, for values such as (eg) <span lang=\"mi\">Māori</span>. }}\\n`;\n    }\n    this.data = `${unescaped}${this.data}`;\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.html`]: this.data,\n    };\n  }\n}\n","import startCase from \"lodash/startCase\";\nimport prettier from \"prettier/standalone\";\nimport parserAngular from \"prettier/parser-angular\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\nimport {\n  MetaAttributeValues,\n  MetaAttributeValue,\n} from \"../../metaComponent/parseMetaHTMLAttribute\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\ntype ComputedProp = {\n  identifiers: string[];\n  expression: string;\n  responseType: \"string\" | \"boolean\";\n};\n\nexport class VueTemplate extends Template {\n  template: string;\n  script: string;\n  style: string;\n\n  imports: string;\n  extendPropsString: string;\n  propsString: string;\n  computed: Record<string, ComputedProp>;\n\n  finalData: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: args.dirname || \"vue\" });\n\n    this.template = \"\";\n    this.script = \"\";\n    this.style = \"\";\n\n    this.imports = \"\";\n    this.propsString = \"\";\n    this.extendPropsString = \"\";\n    this.computed = {};\n\n    this.finalData = \"\";\n\n    this.setPropsString = this.setPropsString.bind(this);\n    this.renderPropType = this.renderPropType.bind(this);\n    this.setImports = this.setImports.bind(this);\n    this.renderAttribute = this.renderAttribute.bind(this);\n    this.getNewComputedName = this.getNewComputedName.bind(this);\n\n    this.setPropsString();\n    this.setImports();\n  }\n\n  setPropsString() {\n    this.propsString = Object.keys(this.props)\n      .map((propId) => {\n        return this.renderPropType(propId) + \";\";\n      })\n      .join(\"\\n  \");\n\n    this.extendPropsString = Object.keys(this.props)\n      .map((propId) => {\n        return `${\n          validJavaScriptIdentifer.test(propId)\n            ? propId\n            : JSON.stringify(propId)\n        }: Object as () => Props[${JSON.stringify(propId)}],`;\n      })\n      .join(\"\\n    \");\n  }\n\n  setImports() {\n    this.imports += `import Vue from \"vue\";'\\n`;\n  }\n\n  renderPropType(propId: string): string {\n    const prop = this.props[propId];\n    let propString = \"\";\n\n    propString += validJavaScriptIdentifer.test(propId)\n      ? propId\n      : JSON.stringify(propId);\n\n    if (!prop.required) {\n      propString += \"?\";\n    }\n\n    propString += \": \";\n\n    switch (prop.type) {\n      case \"PropTypeVariable\": {\n        propString += \"Vue.VNode\";\n        break;\n      }\n      case \"PropTypeAttributeValue\": {\n        propString += `string`;\n        break;\n      }\n      case \"PropTypeAttributeValueOptions\": {\n        propString += `${Object.keys(prop.options)\n          .map((key) => {\n            return validJavaScriptIdentifer.test(key) ? `\"${key}\"` : `\"${key}\"`;\n          })\n          .join(\" | \")}`;\n      }\n    }\n\n    return propString;\n  }\n\n  renderRenderFunction() {\n    const propIds = Object.keys(this.props);\n    const containsInvalidIdentifiers = propIds.some(\n      (propId) => !validJavaScriptIdentifer.test(propId)\n    );\n    if (containsInvalidIdentifiers) {\n      this.template += `export default function ${this.templateId}(props: Props){\\n`;\n      const destructure = propIds\n        .filter((key) => validJavaScriptIdentifer.test(key))\n        .join(\", \");\n      if (destructure) {\n        this.template += `  const { ${destructure} } = props;\\n`;\n      }\n    } else {\n      this.template += `export default function ${\n        this.templateId\n      }({ ${propIds.join(\", \")} }: Props){\\n`;\n    }\n    this.template += `  return (\\n`;\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n    this.template += `<${nodeName}`;\n    this.template += Object.keys(attributes)\n      .map((attributeName): string =>\n        this.renderAttribute(attributeName, attributes[attributeName])\n      )\n      .join(\" \");\n    if (onElement.children.length === 0) {\n      this.template += \"/\";\n    }\n    this.template += \">\";\n    return nodeName;\n  }\n\n  renderAttribute(\n    attributeName: string,\n    attributeValues: MetaAttributeValues\n  ): string {\n    // TODO: escape attribute values and keys\n\n    const containsOnlyConstants = attributeValues.every(\n      (attributeValue) => attributeValue.type === \"MetaAttributeConstant\"\n    );\n\n    let response = \"\";\n\n    response += ` ${!containsOnlyConstants ? \":\" : \"\"}${attributeName}=\"`;\n\n    if (containsOnlyConstants) {\n      response += attributeValues\n        .map((attributeValue) => {\n          if (attributeValue.type === \"MetaAttributeConstant\") {\n            return attributeValue.value;\n          }\n          throw new Error(\n            \"Internal error. Didn't expect type \" + attributeValue.type\n          );\n        })\n        .join(\"\");\n    } else {\n      const computedName = this.getNewComputedName(attributeName);\n\n      const containsExpression = attributeValues.some(\n        (attributeValue) => attributeValue.type !== \"MetaAttributeConstant\"\n      );\n      const containsConstant = attributeValues.some(\n        (attributeValue) => attributeValue.type === \"MetaAttributeConstant\"\n      );\n\n      const computedProp: ComputedProp = this.computed[computedName] || {\n        identifiers: [],\n        expression: containsExpression && containsConstant ? \"`\" : \"\",\n        responseType: \"string\",\n      };\n\n      this.computed[computedName] = computedProp;\n\n      attributeValues.forEach((attributeValue) => {\n        if (\n          containsConstant &&\n          attributeValue.type !== \"MetaAttributeConstant\"\n        ) {\n          computedProp.expression += \"${ \";\n        }\n        const [propExpression, propId] = this.renderAttributeValue(\n          attributeValue\n        );\n        if (propId) {\n          computedProp.identifiers.push(propId);\n        }\n        computedProp.expression += propExpression;\n        if (\n          containsConstant &&\n          attributeValue.type !== \"MetaAttributeConstant\"\n        ) {\n          computedProp.expression += \" || '' }\";\n        }\n      });\n\n      if (containsExpression && containsConstant) {\n        computedProp.expression += \"`\";\n      }\n\n      this.computed[computedName] = computedProp;\n      response += computedName;\n    }\n\n    response += '\"';\n\n    return response;\n  }\n\n  getNewComputedName(name: string): string {\n    let counter = 1;\n    let computedName = \"\";\n    do {\n      computedName = `computed${startCase(name)\n        .replace(/\\s/gi, \"\")\n        .substring(0, 1)\n        .toUpperCase()}${name.substring(1)}${\n        counter === 1 ? \"\" : `${counter}`\n      }`;\n      counter++;\n    } while (this.computed[computedName] !== undefined);\n    return computedName;\n  }\n\n  renderAttributeValue(attributeValue: MetaAttributeValue): [string, string?] {\n    switch (attributeValue.type) {\n      case \"MetaAttributeConstant\": {\n        return [attributeValue.value, undefined];\n      }\n      case \"MetaAttributeVariable\": {\n        return [\n          validJavaScriptIdentifer.test(attributeValue.id)\n            ? attributeValue.id\n            : `props[\"${attributeValue.id}\"]`,\n          attributeValue.id,\n        ];\n      }\n      case \"MetaAttributeVariableOptions\": {\n        const identifier = validJavaScriptIdentifer.test(attributeValue.id)\n          ? attributeValue.id\n          : `props[\"${attributeValue.id}\"]`;\n\n        if (!this.props[attributeValue.id].required) {\n          this.template += `${identifier} && `;\n        }\n        return [\n          `${JSON.stringify(attributeValue.options)}[${identifier}]`,\n          attributeValue.id,\n        ];\n      }\n    }\n  }\n\n  onCloseElement(\n    onCloseElement: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ): void {\n    const { openingElement } = onCloseElement;\n    this.template += `</${openingElement}>`;\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    const { value } = onText;\n    this.template += value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    const { value } = onComment;\n    this.template += `<!--${value}-->`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    this.template += `<slot name=\"${variable.id}\">`;\n  }\n\n  onCloseVariable(variable: Parameters<TemplateFormat[\"onCloseVariable\"]>[0]) {\n    this.template += `</slot>`;\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    if (onIf.parseError === false) {\n      const computedName = this.getNewComputedName(onIf.ids.join(\" \"));\n      this.computed[computedName] = {\n        identifiers: onIf.ids,\n        expression: onIf.testAsJavaScriptExpression,\n        responseType: \"boolean\",\n      };\n      this.template += `<span v-if=\"${computedName}\">`;\n    } else {\n      this.template += `<!-- parse error: ${onIf.error} -->`;\n    }\n  }\n\n  onCloseIf(onCloseIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]) {\n    this.template += `</span>`;\n  }\n\n  onFinalise(onFinalise: Parameters<TemplateFormat[\"onFinalise\"]>[0]) {\n    const { css } = onFinalise;\n\n    const computedString = Object.keys(this.computed)\n      .map((propName) => {\n        const computedProp = this.computed[propName];\n        const containsInvalidIdentifiers = computedProp.identifiers.some(\n          (identifier) => !validJavaScriptIdentifer.test(identifier)\n        );\n        const spreadProps = computedProp.identifiers\n          .filter((identifier) => validJavaScriptIdentifer.test(identifier))\n          .join(\", \");\n\n        let computeFunction = \"(\";\n        if (containsInvalidIdentifiers) {\n          computeFunction += `props: Props): ${computedProp.responseType} => `;\n          if (spreadProps) {\n            computeFunction += \"{\";\n            computeFunction += `      const { ${spreadProps} } = props;\\n`;\n            computeFunction += `      return `;\n          } else {\n            computeFunction += \"(\";\n          }\n        } else {\n          computeFunction += `{${spreadProps}}: Props): ${computedProp.responseType} => (`;\n        }\n\n        computeFunction += computedProp.expression;\n\n        if (containsInvalidIdentifiers && spreadProps) {\n          computeFunction += \"}\";\n        } else {\n          computeFunction += \")\";\n        }\n\n        return `${propName}: ${computeFunction}`;\n      })\n      .join(\",\\n    \");\n\n    const componentVarName = startCase(this.templateId).replace(/\\s/gi, \"\");\n\n    this.script = \"\";\n\n    if (this.propsString) {\n      this.script += `type Props = {\\n  ${this.propsString}\\n};\\n\\n`;\n    }\n\n    this.script += `const ${componentVarName} = Vue.extend({\\n`;\n    if (this.extendPropsString) {\n      this.script += \"  props: {\\n    \";\n      this.script += this.extendPropsString;\n      this.script += \"\\n  },\\n\";\n    }\n    if (computedString) {\n      this.script += `  computed: {\\n`;\n      this.script += `    ${computedString}\\n`;\n      this.script += `  }\\n`;\n    }\n    this.script += `});\\n`;\n    this.script += `export default ${componentVarName};`;\n\n    this.finalData = `<template functional>\\n${this.template}\\n</template>\\n`;\n    if (css) {\n      this.finalData += `<style scoped>\\n${css}\\n</style>\\n`;\n    }\n    this.finalData += `<script lang=\"ts\">\\n${this.imports}\\n\\n${this.script}\\n</script>\\n`;\n\n    try {\n      this.finalData = prettier.format(this.finalData, {\n        parser: \"vue\",\n        printWidth: 80,\n        plugins: [parserAngular], // Vue uses Angular's parser https://prettier.io/blog/2018/11/07/1.15.0.html\n      });\n    } catch (e) {\n      // pass\n    }\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.vue`]: this.finalData,\n    };\n  }\n}\n","import prettier from \"prettier/standalone\";\nimport parserTypeScript from \"prettier/parser-typescript\";\nimport { TemplateFormat, OnConstructor } from \"../Template\";\nimport { ReactTemplate, FragmentStrings } from \"../React/React\";\nimport { TemplateFiles } from \"../../types\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\nconst fragmentStrings: FragmentStrings = {\n  start: \"<Fragment>\",\n  end: \"</Fragment>\",\n};\n\nexport class VueJSXTemplate extends ReactTemplate {\n  render: string;\n  vue: string;\n  fragmentStrings: FragmentStrings;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, fragmentStrings, dirname: args.dirname || \"vue-jsx\" });\n\n    this.render = \"\";\n    this.vue = \"\";\n    this.fragmentStrings = fragmentStrings;\n    this.renderPropType = this.renderPropType.bind(this);\n  }\n\n  renderPropType(propId: string): string {\n    const prop = this.props[propId];\n    let propString = \"\";\n\n    propString += validJavaScriptIdentifer.test(propId)\n      ? propId\n      : `\"${propId}\"`;\n\n    if (!prop.required) {\n      propString += \"?\";\n    }\n\n    propString += \": \";\n\n    switch (prop.type) {\n      case \"PropTypeVariable\": {\n        propString += \"Object as () => Vue.VNode\";\n        break;\n      }\n      case \"PropTypeAttributeValue\": {\n        propString += `String as () => string`;\n        break;\n      }\n      case \"PropTypeAttributeValueOptions\": {\n        propString += `Object as () => ${Object.keys(prop.options)\n          .map((key) => {\n            return validJavaScriptIdentifer.test(key) ? `\"${key}\"` : `\"${key}\"`;\n          })\n          .join(\" | \")}`;\n      }\n    }\n\n    return propString;\n  }\n\n  onFinalise(\n    onFinalise: Parameters<TemplateFormat[\"onFinalise\"]>[0]\n  ): undefined {\n    const result = super.onFinalise(onFinalise);\n    if (!result) {\n      throw Error(\"expected onFinalise result from React template.\");\n    }\n\n    const propsString = `props: {\\n    ${Object.keys(this.props)\n      .map(this.renderPropType)\n      .join(\",\\n    \")}\\n  },`;\n\n    const spreadConstProps = `const { ${Object.keys(this.props)\n      .filter((propId) => validJavaScriptIdentifer.test(propId))\n      .join(\", \")} } = props;`;\n\n    this.vue = `// Vue3 Fragment component\\nimport Vue, { Fragment } from 'vue';\\n\\nexport default Vue.component(${JSON.stringify(\n      this.templateId\n    )}, {\\n  functional: true,\\n  ${propsString}\\n  render: function(h, context) {\\n    const { props } = context;\\n    ${spreadConstProps}\\n    return (${\n      this.hasMultipleRootNodes ? \"<Fragment>\" : \"\"\n    }${result.render}${this.hasMultipleRootNodes ? \"</Fragment>\" : \"\"})\\n }})`;\n\n    try {\n      this.vue = prettier.format(this.vue, {\n        parser: \"typescript\",\n        printWidth: 80,\n        plugins: [parserTypeScript],\n      });\n    } catch (e) {\n      // pass\n    }\n\n    return;\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.ts`]: this.vue,\n    };\n  }\n}\n","import startCase from \"lodash/startCase\";\nimport prettier from \"prettier/standalone\";\nimport parserTypeScript from \"prettier/parser-typescript\";\nimport { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\nimport {\n  MetaAttributeValues,\n  MetaAttributeValue,\n} from \"../../metaComponent/parseMetaHTMLAttribute\";\nimport { validJavaScriptIdentifer } from \"../utils\";\n\nexport class AngularTemplate extends Template {\n  template: string;\n  script: string;\n  style: string;\n\n  imports: string;\n  typeScript: string;\n\n  finalData: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: args.dirname || \"angular\" });\n\n    this.template = \"\";\n    this.script = \"\";\n    this.style = \"\";\n\n    this.imports = \"\";\n    this.typeScript = \"\";\n\n    this.finalData = \"\";\n\n    this.setTypeScript = this.setTypeScript.bind(this);\n    this.renderPropType = this.renderPropType.bind(this);\n    this.setImports = this.setImports.bind(this);\n    this.renderAttribute = this.renderAttribute.bind(this);\n\n    this.setTypeScript();\n    this.setImports();\n  }\n\n  setTypeScript() {\n    const props = Object.keys(this.props).map(this.renderPropType).join(\"\\n  \");\n    this.typeScript = `type Props = {\\n  ${props}\\n};`;\n  }\n\n  setImports() {\n    this.imports += `import { Component } from \"@angular/core\";'\\n`;\n  }\n\n  renderPropType(propId: string): string {\n    const prop = this.props[propId];\n    let propString = \"\";\n\n    propString += validJavaScriptIdentifer.test(propId)\n      ? propId\n      : `\"${propId}\"`;\n\n    if (!prop.required) {\n      propString += \"?\";\n    }\n\n    propString += \": \";\n\n    switch (prop.type) {\n      case \"PropTypeVariable\": {\n        propString += \"any;\";\n        break;\n      }\n      case \"PropTypeAttributeValue\": {\n        propString += `any;`;\n        break;\n      }\n      case \"PropTypeAttributeValueOptions\": {\n        propString += `${Object.keys(prop.options)\n          .map((key) => {\n            return validJavaScriptIdentifer.test(key) ? `\"${key}\"` : `\"${key}\"`;\n          })\n          .join(\" | \")};`;\n      }\n    }\n\n    return propString;\n  }\n\n  renderRenderFunction() {\n    const propIds = Object.keys(this.props);\n    const containsInvalidIdentifiers = propIds.some(\n      (propId) => !validJavaScriptIdentifer.test(propId)\n    );\n    if (containsInvalidIdentifiers) {\n      this.template += `export default function ${this.templateId}(props: Props){\\n`;\n      const destructure = propIds\n        .filter((key) => validJavaScriptIdentifer.test(key))\n        .join(\", \");\n      if (destructure) {\n        this.template += `  const { ${destructure} } = props;\\n`;\n      }\n    } else {\n      this.template += `export default function ${\n        this.templateId\n      }({ ${propIds.join(\", \")} }: Props){\\n`;\n    }\n    this.template += `  return (\\n`;\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n    this.template += `<${nodeName}`;\n    this.template += Object.keys(attributes)\n      .map((attributeName): string =>\n        this.renderAttribute(attributeName, attributes[attributeName])\n      )\n      .join(\" \");\n\n    this.template += \">\";\n    return nodeName;\n  }\n\n  renderAttribute(\n    attributeName: string,\n    attributeValues: MetaAttributeValues\n  ): string {\n    // TODO: escape attribute values and keys\n\n    const containsOnlyConstants = attributeValues.every(\n      (attributeValue) => attributeValue.type === \"MetaAttributeConstant\"\n    );\n\n    let response = \"\";\n\n    response += \" \";\n    if (!containsOnlyConstants) {\n      response += \"[\";\n    }\n    response += attributeName;\n    if (!containsOnlyConstants) {\n      response += \"]\";\n    }\n    response += `=\"`;\n\n    attributeValues.forEach((attributeValue) => {\n      if (attributeValue.type !== \"MetaAttributeConstant\") {\n        response += \"{{ \";\n      }\n      const [propExpression] = this.renderAttributeValue(attributeValue);\n\n      response += propExpression;\n      if (attributeValue.type !== \"MetaAttributeConstant\") {\n        response += \" || '' }}\";\n      }\n    });\n\n    response += '\"';\n\n    return response;\n  }\n\n  renderAttributeValue(attributeValue: MetaAttributeValue): [string, string?] {\n    switch (attributeValue.type) {\n      case \"MetaAttributeConstant\": {\n        return [attributeValue.value, undefined];\n      }\n      case \"MetaAttributeVariable\": {\n        return [\n          validJavaScriptIdentifer.test(attributeValue.id)\n            ? attributeValue.id\n            : `props[\"${attributeValue.id}\"]`,\n          attributeValue.id,\n        ];\n      }\n      case \"MetaAttributeVariableOptions\": {\n        const identifier = validJavaScriptIdentifer.test(attributeValue.id)\n          ? attributeValue.id\n          : `props[\"${attributeValue.id}\"]`;\n\n        if (!this.props[attributeValue.id].required) {\n          this.template += `${identifier} && `;\n        }\n        return [\n          `${JSON.stringify(attributeValue.options)}[${identifier}]`,\n          attributeValue.id,\n        ];\n      }\n    }\n  }\n\n  onCloseElement(\n    onCloseElement: Parameters<TemplateFormat[\"onCloseElement\"]>[0]\n  ): void {\n    const { openingElement } = onCloseElement;\n    this.template += `</${openingElement}>`;\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    const { value } = onText;\n    this.template += value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    const { value } = onComment;\n    this.template += `<!--${value}-->`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    this.template += `{{${variable.id}}}`;\n    this.template += `<ng-template *ngIf=\"${variable.id} == undefined\">`;\n  }\n\n  onCloseVariable(variable: Parameters<TemplateFormat[\"onCloseVariable\"]>[0]) {\n    this.template += \"</ng-template>\";\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    if (onIf.parseError === false) {\n      this.template += `<span *ngIf=\"${JSON.stringify(\n        onIf.testAsJavaScriptExpression\n      )}\">`;\n    } else {\n      this.template += `<!-- parse error: ${onIf.error} -->`;\n    }\n  }\n\n  onCloseIf(onCloseIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]) {\n    this.template += `</span>`;\n  }\n\n  onFinalise(onFinalise: Parameters<TemplateFormat[\"onFinalise\"]>[0]) {\n    const componentVarName = startCase(this.templateId).replace(/\\s/gi, \"\");\n\n    this.finalData = `/* DEV NOTE: this template is under development */\\n${this.imports}\\n\\n${this.typeScript}\\n\\n@Component({\\n  selector: '${this.templateId}',\\n  template: \\`${this.template}\\n\\`\\n})\\nexport default class ${componentVarName} {}`;\n\n    try {\n      this.finalData = prettier.format(this.finalData, {\n        parser: \"typescript\",\n        printWidth: 80,\n        plugins: [parserTypeScript],\n      });\n    } catch (e) {\n      // pass\n    }\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.ts`]: this.finalData,\n    };\n  }\n}\n","import { Template, TemplateFormat, OnConstructor } from \"../Template\";\nimport { TemplateFiles } from \"../../types\";\nimport { MetaAttributeValues } from \"../../metaComponent/parseMetaHTMLAttribute\";\nimport { stringToDjangoVar } from \"../../metaComponent/parseMetaHTMLIf\";\nimport { assertUnreachable } from \"../utils\";\n\nexport class DjangoTemplate extends Template {\n  data: string;\n\n  constructor(args: OnConstructor) {\n    super({ ...args, dirname: \"django\" });\n    this.data = \"\";\n  }\n\n  onElement(\n    onElement: Parameters<TemplateFormat[\"onElement\"]>[0]\n  ): ReturnType<TemplateFormat[\"onElement\"]>[0] {\n    const { nodeName, attributes } = onElement;\n\n    this.data += `<${nodeName}`;\n    Object.keys(attributes).forEach((name) => {\n      const attributeValues = attributes[name];\n      this.data += this.renderAttribute(name, attributeValues);\n    });\n    this.data += \">\";\n    return nodeName;\n  }\n\n  renderAttribute(name: string, attributeValues: MetaAttributeValues): string {\n    let attr = \" \";\n\n    const isOmittedIfEmpty =\n      attributeValues.length === 1 &&\n      [\"MetaAttributeVariable\"].includes(attributeValues[0].type);\n\n    if (isOmittedIfEmpty) {\n      const attributeVariable = attributeValues[0];\n      if (attributeVariable.type !== \"MetaAttributeVariable\") {\n        throw Error(`Internal error`);\n      }\n      attr += `{% if ${stringToDjangoVar(attributeVariable.id)} %}`;\n    }\n\n    attr += name;\n\n    if (attributeValues) {\n      attr += '=\"';\n      attr += attributeValues\n        .map((attributeValue): string => {\n          switch (attributeValue.type) {\n            case \"MetaAttributeConstant\": {\n              return attributeValue.value;\n            }\n            case \"MetaAttributeVariable\": {\n              return `{{ ${stringToDjangoVar(attributeValue.id)} }}`;\n            }\n            case \"MetaAttributeVariableOptions\": {\n              return Object.entries(attributeValue.options)\n                .map(([optionName, optionValue], index, arr) => {\n                  let exp = \"\";\n                  if (index === 0) {\n                    exp += `{% if `;\n                  } else {\n                    exp += `{% elif `;\n                  }\n                  exp += stringToDjangoVar(attributeValue.id);\n                  exp += \" == \";\n                  exp += JSON.stringify(optionName);\n                  exp += ` %}`;\n                  exp += optionValue;\n                  if (index === arr.length - 1) {\n                    exp += `{% endif %}`;\n                  }\n                  return exp;\n                })\n                .join(\"\");\n            }\n          }\n          return assertUnreachable();\n        })\n        .join(\"\")\n        .trim();\n\n      attr += '\"';\n    }\n\n    if (isOmittedIfEmpty) {\n      const attributeVariable = attributeValues[0];\n      if (attributeVariable.type !== \"MetaAttributeVariable\") {\n        throw Error(`Internal error`);\n      }\n      attr += `{% endif %}`;\n    }\n\n    return attr;\n  }\n\n  onCloseElement(args: Parameters<TemplateFormat[\"onCloseElement\"]>[0]): void {\n    this.data += `</${args.openingElement}>`;\n  }\n\n  onText(onText: Parameters<TemplateFormat[\"onText\"]>[0]): void {\n    this.data += onText.value;\n  }\n\n  onComment(onComment: Parameters<TemplateFormat[\"onComment\"]>[0]): void {\n    this.data += `{% ${onComment.value} %}`;\n  }\n\n  onVariable(variable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    this.data += `{% if ${stringToDjangoVar(\n      variable.id\n    )} %}{{ ${stringToDjangoVar(variable.id)} }}`;\n    if (variable.children.length > 0) {\n      this.data += `{% else %}`;\n    }\n  }\n\n  onCloseVariable(closeVariable: Parameters<TemplateFormat[\"onVariable\"]>[0]) {\n    if (closeVariable.children.length > 0) {\n      this.data += `{% endif %}`;\n    }\n  }\n\n  onIf(onIf: Parameters<TemplateFormat[\"onIf\"]>[0]) {\n    if (onIf.parseError === false) {\n      this.data += `{% ${onIf.testAsPythonExpression} %}`;\n    }\n  }\n\n  onCloseIf(onCloseIf: Parameters<TemplateFormat[\"onCloseIf\"]>[0]) {\n    if (onCloseIf.parseError === false) {\n      this.data += `{% endif %}`;\n    }\n  }\n\n  onFinalise(onSerialize: Parameters<TemplateFormat[\"onFinalise\"]>[0]) {\n    // pass\n  }\n\n  serialize(): TemplateFiles {\n    return {\n      [`${this.dirname}/${this.templateId}.html`]: this.data,\n    };\n  }\n}\n","import { MetaComponent } from \"../metaComponent/metaComponent\";\nimport { TemplateFiles } from \"../types\";\nimport { Template, OnConstructor } from \"./Template\";\n\nimport { CSSTemplate } from \"./CSS/CSS\";\nimport { HTMLTemplate } from \"./HTML/HTML\";\nimport { ReactTemplate } from \"./React/React\";\nimport { ReactStyledComponentsTemplate } from \"./ReactStyledComponents/ReactStyledComponents\";\nimport { MustacheTemplate } from \"./Mustache/Mustache\";\nimport { VueTemplate } from \"./Vue/Vue\";\nimport { VueJSXTemplate } from \"./Vue-JSX/Vue-JSX\";\nimport { AngularTemplate } from \"./Angular/Angular\";\nimport { DjangoTemplate } from \"./Django/Django\";\n\ntype MakeTemplatesProps = {\n  templateId: string;\n  metaComponent: MetaComponent;\n};\n\nexport function makeTemplates({\n  templateId,\n  metaComponent,\n}: MakeTemplatesProps): TemplateFiles {\n  const args: OnConstructor = {\n    props: metaComponent.props,\n    templateId,\n    hasMultipleRootNodes: metaComponent.nodes.length > 1,\n  };\n  return mergeTemplateFiles(\n    makeTemplate(templateId, metaComponent, new HTMLTemplate(args)),\n    makeTemplate(templateId, metaComponent, new CSSTemplate(args)),\n    makeTemplate(templateId, metaComponent, new MustacheTemplate(args)),\n    makeTemplate(templateId, metaComponent, new DjangoTemplate(args)),\n    makeTemplate(templateId, metaComponent, new ReactTemplate(args)),\n    makeTemplate(\n      templateId,\n      metaComponent,\n      new ReactStyledComponentsTemplate(args)\n    ),\n    makeTemplate(templateId, metaComponent, new VueTemplate(args)),\n    makeTemplate(templateId, metaComponent, new VueJSXTemplate(args)),\n    makeTemplate(templateId, metaComponent, new AngularTemplate(args))\n  );\n}\n\nfunction mergeTemplateFiles(...obj: TemplateFiles[]): TemplateFiles {\n  return Object.assign({}, ...obj);\n}\n\nfunction makeTemplate(\n  templateId: string,\n  metaComponent: MetaComponent,\n  instance: Template\n) {\n  function walk(node: MetaComponent[\"nodes\"][number]) {\n    switch (node.type) {\n      case \"Element\": {\n        const openingElement = instance.onElement(node);\n        node.children.forEach(walk);\n        instance.onCloseElement({ openingElement, children: node.children });\n        break;\n      }\n      case \"Text\": {\n        instance.onText(node);\n        break;\n      }\n      case \"Comment\": {\n        instance.onComment(node);\n        break;\n      }\n      case \"Variable\": {\n        instance.onVariable(node);\n        node.children.forEach(walk);\n        instance.onCloseVariable(node);\n        break;\n      }\n      case \"If\": {\n        instance.onIf(node);\n        node.children.forEach(walk);\n        instance.onCloseIf(node);\n        break;\n      }\n    }\n  }\n\n  metaComponent.nodes.forEach(walk);\n\n  instance.onFinalise({ css: metaComponent.cssString });\n\n  return instance.serialize();\n}\n","export type Log = (...args: any[]) => void;\n\nexport function logFactory(haltOnErrors: boolean): Log {\n  return (...args) => {\n    if (haltOnErrors) {\n      throw Array.from(args)\n        .map((arg) => arg.toString())\n        .join(\"\\n\");\n    }\n    console.log(...args, \"\");\n  };\n}\n","const LOCAL_STORAGE = \"LOCAL_STORAGE\" as const;\ntype LOCAL_STORAGE_TYPE = typeof LOCAL_STORAGE;\n\n/*\n *  DEVELOPER NOTE\n *\n *  Some browsers can block storage (localStorage, sessionStorage)\n *  access for privacy reasons, and all browsers can have storage\n *  that's full, and so they'll throw exceptions.\n *\n *  These exceptions can happen even with `if (window.localStorage)`!\n *\n *  Also sometimes localStorage/sessionStorage are enabled\n *  AFTER page load on mobiles. This is a browser bug we need to\n *  handle it gracefully.\n *\n *  So,\n *\n *****************************************************************\n *           we need to wrap all usage in try/catch\n *****************************************************************\n *\n *  and,\n *\n ****************************************************************\n *     we need to defer actual usage of these until necessary,\n *    hence using CONSTANTS to indirectly refer to these storages\n *     rather than window.localStorage/window.sessionStorage\n *                         directly\n ****************************************************************\n */\n\nconst storage = (STORAGE_TYPE: LOCAL_STORAGE_TYPE) => ({\n  setItem: (key: string, value: string) => {\n    if (typeof window === \"undefined\") return; // exit early for SSR\n    try {\n      STORAGE_TYPE === LOCAL_STORAGE\n        ? window.localStorage.setItem(key, value)\n        : window.sessionStorage.setItem(key, value);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  getItem: (key: string) => {\n    if (typeof window === \"undefined\") return; // exit early for SSR\n    try {\n      return STORAGE_TYPE === LOCAL_STORAGE\n        ? window.localStorage.getItem(key)\n        : window.sessionStorage.getItem(key);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  removeItem: (key: string) => {\n    try {\n      STORAGE_TYPE === LOCAL_STORAGE\n        ? window.localStorage.removeItem(key)\n        : window.sessionStorage.removeItem(key);\n    } catch (e) {\n      console.log(e);\n    }\n  },\n});\n\nexport const localStorageWrapper = storage(LOCAL_STORAGE);\n","import React, {\n  Fragment,\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport marked from \"marked\";\nimport Modal from \"react-modal\";\nimport { generateTemplates, MetaComponents } from \"./lib\";\nimport { localStorageWrapper } from \"./storage\";\nimport peacock from \"./peacock.png\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/mode-css\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"./App.css\";\nimport startCase from \"lodash/startCase\";\n\nconst STORAGE_METAHTML = \"STORAGE_METAHTML\";\nconst STORAGE_CSS = \"STORAGE_CSS\";\nconst STORAGE_RESULT_INDEX = \"STORAGE_RESULT_INDEX\";\n\nconst oneFrameMs = 15;\n\nconst theme = \"monokai\";\n\nconst showEverything = window.document.location?.search.includes(\"?everything\");\n\nlet hashState: any = window.location.hash\n  ? parseInt(window.location.hash, 10)\n  : undefined;\nif (Number.isNaN(hashState)) {\n  hashState = undefined;\n}\n\nconst resultIndexString = localStorageWrapper.getItem(STORAGE_RESULT_INDEX);\nconst resultIndex = resultIndexString\n  ? parseInt(resultIndexString, 10)\n  : showEverything\n  ? 0\n  : hashState\n  ? hashState\n  : 5;\n\nconst defaultValues = {\n  metaHTML:\n    localStorageWrapper.getItem(STORAGE_METAHTML) ||\n    `<h1\\n  class=\"my-style {{ colour: my-style--blue as blue | my-style--red as red }}\"\\n>\\n  <mt-variable id=\"children\"></mt-variable>\\n</h1>`,\n  css:\n    localStorageWrapper.getItem(STORAGE_CSS) ||\n    `.my-style { padding: 5px }\\n.my-style--blue{ color: blue }\\n.my-style--red{ color: red }\\n/* this CSS isn't used and will be tree shaken */\\n.treeShake { color: green; }`,\n  resultIndex: resultIndex,\n};\n\nconst templateId = \"MyComponent\";\n\nconst modalStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    zIndex: 10,\n    border: \"none\",\n  },\n  content: {\n    background: \"none\",\n    inset: \"0px\",\n    border: \"none\",\n    top: \"0px\",\n    bottom: \"0px\",\n    right: \"0px\",\n    left: \"0px\",\n  },\n} as const;\nModal.setAppElement(\"#root\");\n\nfunction App() {\n  const [metaHTML, setMetaHTML] = useState<string>(defaultValues.metaHTML);\n  const [css, setCSS] = useState<string>(defaultValues.css);\n  const [metaComponents, setMetaComponents] = useState<MetaComponents>();\n  const [resultIndex, setResultIndex] = useState<number>(\n    defaultValues.resultIndex\n  );\n  const [isWhatOpen, setIsWhatOpen] = useState<boolean>(false);\n  const [isWhyOpen, setIsWhyOpen] = useState<boolean>(\n    window.location.hash.includes(\"why\")\n  );\n  const debounceTime = useRef<number>(100);\n  const iframeRef = useRef(null);\n\n  const openWhatModal = () => {\n    setIsWhyOpen(false);\n    setIsWhatOpen(true);\n  };\n  const closeWhatModal = () => setIsWhatOpen(false);\n\n  const openWhyModal = () => {\n    setIsWhatOpen(false);\n    setIsWhyOpen(true);\n  };\n  const closeWhyModal = () => setIsWhyOpen(false);\n\n  useEffect(() => {\n    const root: HTMLElement | null = document.querySelector(\"#root\");\n    if (!root) return;\n    if (isWhatOpen || isWhyOpen) {\n      root.classList.add(\"blur\");\n    } else {\n      root.classList.remove(\"blur\");\n    }\n  }, [isWhatOpen, isWhyOpen]);\n\n  const iframeRefCallback = useCallback((node) => {\n    console.log(\"Setting iframe \", node);\n    iframeRef.current = node; // for some reason setting ref={iframeRef} wasn't working in Chrome\n  }, []);\n\n  useEffect(() => {\n    const fn = () => {\n      const iframeEl: HTMLIFrameElement | null = iframeRef.current;\n      if (!iframeEl) {\n        console.log(\"No iframe ref available.\", iframeEl);\n        return;\n      }\n      // @ts-ignore\n      const domDocument = iframeEl.contentWindow?.document;\n      if (!domDocument) {\n        console.log(\"No iframe contentWindow document available.\", domDocument);\n        return;\n      }\n      const documentElement = domDocument.documentElement;\n      if (!documentElement) {\n        console.log(\"No iframe documentElement available.\", documentElement);\n        return;\n      }\n      const startTime = Date.now();\n      const result = generateTemplates({\n        domDocument,\n        templateId,\n        metaHTMLString: metaHTML,\n        cssString: css,\n        haltOnErrors: false,\n      });\n      const endTime = Date.now();\n      let newDebounceTime = endTime - startTime;\n      newDebounceTime =\n        newDebounceTime < oneFrameMs ? oneFrameMs : newDebounceTime;\n      console.info(`Debouncing calling MetaComponent at ${newDebounceTime}ms`);\n      debounceTime.current = newDebounceTime;\n      setMetaComponents(result);\n    };\n    const handler = setTimeout(fn, debounceTime.current);\n    return () => clearTimeout(handler);\n  }, [metaHTML, css]);\n\n  const filePaths = metaComponents ? Object.keys(metaComponents.files) : [];\n\n  const outputValue = metaComponents\n    ? resultIndex === 0\n      ? JSON.stringify(metaComponents, null, 2)\n      : filePaths[resultIndex - 1]\n      ? metaComponents.files[filePaths[resultIndex - 1]]\n      : \"\"\n    : \"\";\n\n  const outputMode =\n    resultIndex === 0\n      ? \"json\"\n      : filePaths[resultIndex - 1]\n      ? aceMode(filePaths[resultIndex - 1])\n      : \"json\";\n\n  const markers = [];\n  if (\n    resultIndex > 0 &&\n    filePaths[resultIndex - 1] &&\n    pathType(filePaths[resultIndex - 1]).includes(\"react\")\n  ) {\n    const templateIdIndex = outputValue.indexOf(templateId);\n    const outputValueBefore = outputValue.substring(0, templateIdIndex);\n    const rowIndex =\n      outputValueBefore.length - outputValueBefore.replace(/\\n/g, \"\").length;\n\n    const startCol = outputValue.split(\"\\n\")[rowIndex].indexOf(templateId);\n\n    markers.push({\n      startRow: rowIndex,\n      startCol,\n      endRow: rowIndex,\n      endCol: startCol + templateId.length - 1,\n      className: \"mt-tooltip\",\n      type: \"text\" as const,\n      inFront: true,\n    });\n  }\n\n  return (\n    <Fragment>\n      <Modal\n        isOpen={isWhatOpen}\n        onRequestClose={closeWhatModal}\n        style={modalStyles}\n        contentLabel=\"What is MetaHTML?\"\n        shouldCloseOnOverlayClick={true}\n      >\n        <div className=\"modal-content\" onClick={closeWhatModal} id=\"what-modal\">\n          <div\n            className=\"modal-content__body\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button onClick={closeWhatModal} className=\"close_button\">\n              close <span aria-hidden> ✘</span>\n            </button>\n            <div>\n              <h2>MetaHTML?</h2>\n\n              <button\n                onClick={openWhyModal}\n                className=\"modal__link\"\n                aria-label=\"Open modal explaining MetaComponent\"\n                aria-expanded={isWhyOpen}\n                aria-controls=\"why-modal\"\n              >\n                <span className=\"modal__link--peripheral\">(see also:</span> Why\n                MetaComponent?<span className=\"modal__link--peripheral\">)</span>\n              </button>\n              <div dangerouslySetInnerHTML={{ __html: whatIsMetaHTML }}></div>\n            </div>\n\n            <button\n              onClick={openWhyModal}\n              className=\"modal__link\"\n              aria-label=\"Open modal explaining MetaComponent\"\n              aria-expanded={isWhyOpen}\n              aria-controls=\"why-modal\"\n            >\n              <span className=\"modal__link--peripheral\">(see also:</span> Why\n              MetaComponent?<span className=\"modal__link--peripheral\">)</span>\n            </button>\n\n            <button onClick={closeWhatModal} className=\"close_button\">\n              close <span aria-hidden> ✘</span>\n            </button>\n          </div>\n        </div>\n      </Modal>\n      <Modal\n        isOpen={isWhyOpen}\n        onRequestClose={closeWhyModal}\n        style={modalStyles}\n        contentLabel=\"Why is MetaComponent?\"\n        shouldCloseOnOverlayClick={true}\n      >\n        <div className=\"modal-content\" onClick={closeWhatModal} id=\"why-modal\">\n          <div\n            className=\"modal-content__body\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <button onClick={closeWhyModal} className=\"close_button\">\n              close <span aria-hidden> ✘</span>\n            </button>\n            <div dangerouslySetInnerHTML={{ __html: whyIsMetaComponent }}></div>\n\n            <button onClick={closeWhyModal} className=\"close_button\">\n              close <span aria-hidden> ✘</span>\n            </button>\n          </div>\n        </div>\n      </Modal>\n      <div className=\"MetaComponentDemo\">\n        <div id=\"button_tray_container\" className=\"button-tray\">\n          <button\n            onClick={openWhyModal}\n            className=\"button-tray__link\"\n            aria-label=\"Open modal explaining MetaComponent\"\n            aria-expanded={isWhyOpen}\n            aria-controls=\"why-modal\"\n          >\n            Why MetaComponent?\n          </button>\n          <a\n            href=\"https://github.com/springload/metacomponent\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            className=\"button-tray__link\"\n            aria-label=\"GitHub Repo\"\n          >\n            Repo\n          </a>\n        </div>\n        <h1 className=\"title_container\">\n          MetaComponent REPL{\" \"}\n          <img src={peacock} alt=\"\" className=\"title_container__peacock\" />\n        </h1>\n\n        <fieldset className=\"html_container\">\n          <legend>\n            MetaHTML\n            <button\n              onClick={openWhatModal}\n              className=\"what-button\"\n              aria-label=\"Why MetaHTML?\"\n              aria-expanded={isWhatOpen}\n              aria-controls=\"what-modal\"\n            >\n              ?\n            </button>\n          </legend>\n          <AceEditor\n            mode=\"html\"\n            theme={theme}\n            onChange={(val) => {\n              setMetaHTML(val);\n              localStorageWrapper.setItem(STORAGE_METAHTML, val);\n            }}\n            name=\"html\"\n            value={metaHTML}\n            width=\"100%\"\n            height=\"100%\"\n            showGutter={false}\n            showPrintMargin={false}\n          />\n        </fieldset>\n\n        <fieldset className=\"css_container\">\n          <legend>Standard CSS</legend>\n          <AceEditor\n            mode=\"css\"\n            theme={theme}\n            onChange={(val) => {\n              setCSS(val);\n              localStorageWrapper.setItem(STORAGE_CSS, val);\n            }}\n            name=\"css\"\n            value={css}\n            width=\"100%\"\n            height=\"100%\"\n            showGutter={false}\n            showPrintMargin={false}\n          />\n        </fieldset>\n\n        <iframe\n          id=\"iframe\"\n          src=\"./iframe.html\"\n          className=\"iframe_container\"\n          title=\"MetaComponent iframe\"\n          ref={iframeRefCallback}\n        ></iframe>\n\n        <fieldset className=\"output_container\">\n          <legend>\n            <span className=\"output_container--label\">Outputs:</span>\n            {showEverything && (\n              <button\n                role=\"tab\"\n                aria-selected={resultIndex === 0}\n                className={`tab ${\n                  resultIndex === 0 ? \"tab--selected\" : undefined\n                }`}\n                aria-controls=\"output\"\n                id=\"tab-0\"\n                onClick={(e) => {\n                  const resultIndex = 0;\n                  setResultIndex(resultIndex);\n                  localStorageWrapper.setItem(\n                    STORAGE_RESULT_INDEX,\n                    resultIndex.toString()\n                  );\n                }}\n              >\n                Everything\n              </button>\n            )}\n            {metaComponents\n              ? Object.keys(metaComponents.files).map((file, fileIndex) => (\n                  <button\n                    key={file}\n                    role=\"tab\"\n                    aria-selected={resultIndex === fileIndex + 1}\n                    className={`tab ${\n                      resultIndex === fileIndex + 1\n                        ? \"tab--selected\"\n                        : undefined\n                    }`}\n                    aria-controls=\"output\"\n                    id={`tab-${fileIndex + 1}`}\n                    onClick={(e) => {\n                      const resultIndex = fileIndex + 1;\n                      setResultIndex(resultIndex);\n                      localStorageWrapper.setItem(\n                        STORAGE_RESULT_INDEX,\n                        resultIndex.toString()\n                      );\n                      window.location.hash = resultIndex.toString();\n                    }}\n                    title={formatName(file)}\n                  >\n                    {formatBriefName(file)}\n                  </button>\n                ))\n              : null}\n          </legend>\n          <Flash\n            text={\n              <>\n                this is uneditable. <br />\n                it's the output from MetaComponent <br />\n                click tabs above to see formats\n              </>\n            }\n          >\n            <AceEditor\n              mode={outputMode}\n              theme={theme}\n              name=\"output\"\n              value={outputValue}\n              readOnly\n              width=\"100%\"\n              height=\"100%\"\n              showPrintMargin={false}\n              showGutter={false}\n              markers={markers}\n            />\n          </Flash>\n        </fieldset>\n      </div>\n    </Fragment>\n  );\n}\n\ntype FlashProps = {\n  text: React.ReactNode;\n  children: React.ReactNode;\n};\n\nfunction Flash({ text, children }: FlashProps) {\n  const timer = useRef<NodeJS.Timeout>();\n  const [animate, setAnimate] = useState(\"off\");\n  const handleKey = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key.trim() === \"\") return;\n    setAnimate(\"on\");\n    timer.current = setTimeout(() => {\n      if (timer.current) clearTimeout(timer.current);\n      setAnimate(\"off\");\n    }, 1000);\n  };\n\n  return (\n    <div onKeyPress={handleKey} className=\"flash-container\">\n      <div className={`flash flash--${animate}`}>\n        <span className=\"flash__text\">{text}</span>\n      </div>\n      {children}\n    </div>\n  );\n}\n\nfunction aceMode(file: string) {\n  const dirname = file.substring(0, file.indexOf(\"/\"));\n  if (dirname === \"react\") {\n    return \"javascript\";\n  }\n  return dirname;\n}\n\nfunction pathType(file: string) {\n  return file.substring(0, file.indexOf(\"/\"));\n}\n\nfunction formatName(file: string): string | undefined {\n  const dirname = pathType(file);\n  if (dirname === \"react-styled-components\") {\n    return \"React with Styled Components 💅\";\n  }\n  return undefined;\n}\n\nfunction formatBriefName(file: string): string {\n  const dirname = pathType(file);\n\n  switch (dirname) {\n    case \"html\":\n      return \"HTML\";\n    case \"css\":\n      return \"CSS\";\n    case \"react-styled-components\":\n      return \"React 💅\";\n    case \"vue-jsx\":\n      return \"Vue JSX\";\n    default:\n      return startCase(dirname).replace(/-/g, \" \");\n  }\n}\n\nexport default App;\n\nconst whatIsMetaHTML = marked(`\n\nMetaComponent uses **MetaHTML** and **standard CSS** as inputs to generate components in a variety of formats.\n\nMetaHTML is HTML with markers for the parts that should be configurable, as variables.\n\nThere are two types of variables, for attributes and elements:\n\n- attributes:\n  - \\`<span class=\"{{ someVariable }}\">\\`\n    - \\`?\\` makes it optional \\`{{ someVariable? }}\\`.\n    - multiple variables \\`<span class=\"{{ class }}{{ otherClass }}\">\\`\n  - enumerations like \\`{{ variableName: option1 | option2 }}\\` eg \\`<span class=\"{{ color: class-red | class-blue }}\">\\` and MetaComponent will generate typings to those valid choices. Enumerations may only be strings.\n  - label enumerations with friendly names with \\`as FriendlyName\\` eg  \\`class=\"{{ variableName: box--color-red as Red | box--color-blue as Blue }}\"\\`.\n- elements:\n  - \\`<mt-variable id=\"variableName\"></mt-variable>\\`\n    - The attribute \\`optional\\` makes it optional eg \\`<mt-variable id=\"variableName\" optional></mt-variable>\\`\n    - provide a default value with child nodes eg \\`<mt-variable id=\"variableName\">default value</mt-variable>\\`\n  - Conditional logic \\`<mt-if test=\"isShown\">thing to show if true</mt-if>\\`, or \\`test=\"someVariable === 'frogs' \"\\`, using JavaScript expressions. In the future these expressions will be converted to other languages, so please limit to single variable string comparisons for the greatest range of options.\n\nMetaHTML is for generating stateless components. Logic should be in a higher-order components (HOC).\n\nThere is no support for loops. Use composition instead.\n\n\n`);\n\nconst whyIsMetaComponent = marked(`\n## Why MetaComponent?\n\nMetaComponent can generate stateless components in a variety of languages.\n\nSome of its use-cases involve:\n* migrating to another template format as a one-off conversion;\n* providing templates in multiple formats as an ongoing feature of a Design System or Pattern Library.\n\n### Design Systems / Pattern Libraries\n\nIt's often the case that governments and large organisations have websites with a divergent behaviours and appearances (HTML and CSS) and so an obvious solution is Design Systems and Pattern Libraries where you'd publish UX advice, and components for people to use in order to adhere to the look of your organisation.\n\nThere may also be divergence in web component technology -- they use React, Vue, Angular, Handlebars, Jinja2, Twig, and many, many more.\n\nIt may not be practical to converge template formats, or there might be good reasons for divergence.\n\nIt would be a lot of manual work to support all of those web frameworks, and so Design Systems and Pattern Libraries typically offer HTML/CSS, maybe one additional format, and all of these are written by hand.\n\nDesign Systems often solve one problem (standardising HTML/CSS) while creating new technical barriers that may hinder adoption.\n\n**MetaComponent complements Design Systems/Pattern Libraries by generating components for many frameworks to make it easiser to adopt.**\n\n`);\n\n/*\n  <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"-3 0 97 100\"\n              preserveAspectRatio=\"xMidYMid\"\n              className=\"modal-content__diagram\"\n            >\n              <defs>\n                <marker\n                  id=\"arrowhead\"\n                  markerWidth=\"5\"\n                  markerHeight=\"3\"\n                  refX=\"0\"\n                  refY=\"1.5\"\n                  orient=\"auto\"\n                >\n                  <polygon points=\"0 0, 5 1.5, 0 3\" />\n                </marker>\n              </defs>\n              <rect\n                x=\"0\"\n                y=\"10\"\n                width=\"35\"\n                height=\"9\"\n                stroke=\"#ccc\"\n                strokeWidth=\"0.4\"\n                strokeDasharray=\"1 1\"\n              ></rect>\n              <text x=\"5\" y=\"16\" fontSize=\"5\" fill=\"white\">\n                MetaHTML\n              </text>\n              <text x=\"17\" y=\"23\" fontSize=\"5\" fill=\"white\">\n                +\n              </text>\n              <rect\n                x=\"0\"\n                y=\"24\"\n                width=\"35\"\n                height=\"9\"\n                fill=\"transparent\"\n                strokeWidth=\"0.4\"\n                strokeDasharray=\"1 1\"\n              ></rect>\n              <text x=\"5\" y=\"30.5\" fontSize=\"5\">\n                CSS\n              </text>\n\n              <line\n                x1=\"38\"\n                y1=\"21.5\"\n                x2=\"42\"\n                y2=\"21.5\"\n                strokeWidth=\"1\"\n                markerEnd=\"url(#arrowhead)\"\n              />\n\n              <rect\n                x=\"50\"\n                y=\"10\"\n                width=\"35\"\n                height=\"23\"\n                fill=\"transparent\"\n                strokeWidth=\"0.4\"\n                strokeDasharray=\"1 1\"\n              ></rect>\n              <text x=\"53\" y=\"23\" fontSize=\"5\" fill=\"white\">\n                Components\n              </text>\n            </svg>\n*/\n","// MetaComponent WebTemplateTranslator\nimport {\n  parseMetaComponentString,\n  MetaComponent,\n} from \"./metaComponent/metaComponent\";\nimport { makeTemplates } from \"./makeTemplates/makeTemplates\";\nimport { TemplateFiles } from \"./types\";\nimport { logFactory } from \"./log\";\n\ntype Props = {\n  domDocument: Document;\n  templateId: string;\n  metaHTMLString: string;\n  cssString: string;\n  haltOnErrors: boolean;\n};\n\nexport type MetaComponents = {\n  metaComponent: MetaComponent;\n  files: TemplateFiles;\n};\n\nexport function generateTemplates({\n  domDocument,\n  templateId,\n  metaHTMLString,\n  cssString,\n  haltOnErrors,\n}: Props): MetaComponents {\n  const metaComponent = parseMetaComponentString({\n    domDocument,\n    metaHTMLString,\n    cssString,\n    log: logFactory(haltOnErrors),\n  });\n\n  return {\n    metaComponent,\n    files: makeTemplates({ templateId, metaComponent }),\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}